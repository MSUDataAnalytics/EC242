{
  "hash": "a2ac9971124d98389595f19204a759c0",
  "result": {
    "markdown": "---\ntitle: \"The Bias-Variance Tradeoff\"\nlinktitle: \"9a: Bias vs. Variance\"\nread_date: \"2024-01-08\"\nmenu:\n  content:\n    parent: Course content\n    weight: 1\ntype: docs\noutput:\n  blogdown::html_page:\n    toc: true\n---\n\n\n## Required Reading\n\n- This page.\n- <i class=\"fas fa-book\"></i> [Chapter 2](https://trevorhastie.github.io/ISLR/ISLR%20Seventh%20Printing.pdf) in *Introduction to Statistical Learning with Applications in R*.\n\n### Guiding Questions\n\n- What is the relationship between **bias**, **variance**, and **mean squared error?**\n- What is the relationship between **model flexibility** and training error?\n- What is the relationship between **model flexibility** and validation (or test) error?\n\n# The Biasâ€“Variance Tradeoff\n\n\n\n\n\nThis lecture will begin to dig into some theoretical details of estimating regression functions, in particular how the **bias-variance tradeoff** helps explain the relationship between **model flexibility** and the errors a model makes.\n\nDon't freak out if this seems mathematically overwhelming. We'll walk through relatively slowly. It's not super important to follow the nitty-gritty details; but the broad takeaways are quite important.\n\n## R Setup and Source\n\n\n::: {.cell layout-align=\"center\" hash='10a_cache/html/packages_c039798cf4e452f5c1b10c21001794f1'}\n\n```{.r .cell-code}\nlibrary(tibble)     # data frame printing\nlibrary(dplyr)      # data manipulation\n\nlibrary(caret)      # fitting knn\nlibrary(rpart)      # fitting trees\nlibrary(rpart.plot) # plotting trees\n```\n:::\n\n\n## The Regression Setup\n\nConsider the general regression setup where we are given a random pair $(X, Y) \\in \\mathbb{R}^p \\times \\mathbb{R}$. We would like to \"predict\" $Y$ with some function of $X$, say, $f(X)$.\n\nTo clarify what we mean by \"predict,\" we specify that we would like $f(X)$ to be \"close\" to $Y$. To further clarify what we mean by \"close,\" we define the **squared error loss** of estimating $Y$ using $f(X)$.\n\n$$\nL(Y, f(X)) \\triangleq (Y - f(X)) ^ 2\n$$\n\nNow we can clarify the goal of regression, which is to minimize the above loss, on average. We call this the **risk** of estimating $Y$ using $f(X)$.\n\n$$\nR(Y, f(X)) \\triangleq \\mathbb{E}[L(Y, f(X))] = \\mathbb{E}_{X, Y}[(Y - f(X)) ^ 2]\n$$\n\nBefore attempting to minimize the risk, we first re-write the risk after conditioning on $X$.\n\n$$\n\\mathbb{E}_{X, Y} \\left[ (Y - f(X)) ^ 2 \\right] = \\mathbb{E}_{X} \\mathbb{E}_{Y \\mid X} \\left[ ( Y - f(X) ) ^ 2 \\mid X = x \\right]\n$$\n\nMinimizing the right-hand side is much easier, as it simply amounts to minimizing the inner expectation with respect to $Y \\mid X$, essentially minimizing the risk pointwise, for each $x$.\n\nIt turns out, that the risk is minimized by setting $f(x)$ to be equal the conditional mean of $Y$ given $X$,\n\n$$\nf(x) = \\mathbb{E}(Y \\mid X = x)\n$$\n\nwhich we call the **regression function**.^[Note that in this section, we will refer to $f(x)$ as the regression function instead of $\\mu(x)$ for unimportant and arbitrary reasons.]\n\nNote that the choice of squared error loss is somewhat arbitrary. Suppose instead we chose absolute error loss.\n\n$$\nL(Y, f(X)) \\triangleq | Y - f(X) |\n$$\n\nThe risk would then be minimized setting $f(x)$ equal to the conditional median.\n\n$$\nf(x) = \\text{median}(Y \\mid X = x)\n$$\n\nDespite this possibility, our preference will still be for squared error loss. The reasons for this are numerous, including: historical, ease of optimization, and protecting against large deviations.\n\nNow, given data $\\mathcal{D} = (x_i, y_i) \\in \\mathbb{R}^p \\times \\mathbb{R}$, our goal becomes finding some $\\hat{f}$ that is a good estimate of the regression function $f$. We'll see that this amounts to minimizing what we call the reducible error.\n\n## Reducible and Irreducible Error\n\nSuppose that we obtain some $\\hat{f}$, how well does it estimate $f$? We define the **expected prediction error** of predicting $Y$ using $\\hat{f}(X)$. A good $\\hat{f}$ will have a low expected prediction error.\n\n$$\n\\text{EPE}\\left(Y, \\hat{f}(X)\\right) \\triangleq \\mathbb{E}_{X, Y, \\mathcal{D}} \\left[  \\left( Y - \\hat{f}(X) \\right)^2 \\right]\n$$\n\nThis expectation is over $X$, $Y$, and also $\\mathcal{D}$. The estimate $\\hat{f}$ is actually random depending on the data, $\\mathcal{D}$, used to estimate $\\hat{f}$. We could actually write $\\hat{f}(X, \\mathcal{D})$ to make this dependence explicit, but our notation will become cumbersome enough as it is.\n\nLike before, we'll condition on $X$. This results in the expected prediction error of predicting $Y$ using $\\hat{f}(X)$ when $X = x$.\n\n$$\n\\text{EPE}\\left(Y, \\hat{f}(x)\\right) =\n\\mathbb{E}_{Y \\mid X, \\mathcal{D}} \\left[  \\left(Y - \\hat{f}(X) \\right)^2 \\mid X = x \\right] =\n\\underbrace{\\mathbb{E}_{\\mathcal{D}} \\left[  \\left(f(x) - \\hat{f}(x) \\right)^2 \\right]}_\\textrm{reducible error} +\n\\underbrace{\\mathbb{V}_{Y \\mid X} \\left[ Y \\mid X = x \\right]}_\\textrm{irreducible error}\n$$\n\nA number of things to note here:\n\n- The expected prediction error is for a random $Y$ given a fixed $x$ and a random $\\hat{f}$. As such, the expectation is over $Y \\mid X$ and $\\mathcal{D}$. Our estimated function $\\hat{f}$ is random depending on the data, $\\mathcal{D}$, which is used to perform the estimation.\n- The expected prediction error of predicting $Y$ using $\\hat{f}(X)$ when $X = x$ has been decomposed into two errors:\n    - The **reducible error**, which is the expected squared error loss of estimation $f(x)$ using $\\hat{f}(x)$ at a fixed point $x$. The only thing that is random here is $\\mathcal{D}$, the data used to obtain $\\hat{f}$. (Both $f$ and $x$ are fixed.) We'll often call this reducible error the **mean squared error** of estimating $f(x)$ using $\\hat{f}$ at a fixed point $x$.\n    $$ \\text{MSE}\\left(f(x), \\hat{f}(x)\\right) \\triangleq \\mathbb{E}_{\\mathcal{D}} \\left[  \\left(f(x) - \\hat{f}(x) \\right)^2 \\right]$$\n    - The **irreducible error**. This is simply the variance of $Y$ given that $X = x$, essentially noise that we do not want to learn. This is also called the **Bayes error**.\n\nAs the name suggests, the reducible error is the error that we have some control over. But how do we control this error?\n\n## Bias-Variance Decomposition\n\nAfter decomposing the expected prediction error into reducible and irreducible error, we can further decompose the reducible error.\n\nRecall the definition of the **bias** of an estimator.\n\n$$\n\\text{bias}(\\hat{\\theta}) \\triangleq \\mathbb{E}\\left[\\hat{\\theta}\\right] - \\theta\n$$\n\nAlso recall the definition of the **variance** of an estimator.\n\n$$\n\\mathbb{V}(\\hat{\\theta}) = \\text{var}(\\hat{\\theta}) \\triangleq \\mathbb{E}\\left [ ( \\hat{\\theta} -\\mathbb{E}\\left[\\hat{\\theta}\\right] )^2 \\right]\n$$\n\nUsing this, we further decompose the reducible error (mean squared error) into bias squared and variance.\n\n$$\n\\text{MSE}\\left(f(x), \\hat{f}(x)\\right) =\n\\mathbb{E}_{\\mathcal{D}} \\left[  \\left(f(x) - \\hat{f}(x) \\right)^2 \\right] =\n\\underbrace{\\left(f(x) - \\mathbb{E} \\left[ \\hat{f}(x) \\right]  \\right)^2}_{\\text{bias}^2 \\left(\\hat{f}(x) \\right)} +\n\\underbrace{\\mathbb{E} \\left[ \\left( \\hat{f}(x) - \\mathbb{E} \\left[ \\hat{f}(x) \\right] \\right)^2 \\right]}_{\\text{var} \\left(\\hat{f}(x) \\right)}\n$$\n\nThis is actually a common fact in estimation theory, but we have stated it here specifically for estimation of some regression function $f$ using $\\hat{f}$ at some point $x$.\n\n$$\n\\text{MSE}\\left(f(x), \\hat{f}(x)\\right) = \\text{bias}^2 \\left(\\hat{f}(x) \\right) + \\text{var} \\left(\\hat{f}(x) \\right)\n$$\n\nIn a perfect world, we would be able to find some $\\hat{f}$ which is **unbiased**, that is $\\text{bias}\\left(\\hat{f}(x) \\right) = 0$, which also has low variance. In practice, this isn't always possible.\n\nIt turns out, there is a **bias-variance tradeoff**. That is, often, the more bias in our estimation, the lesser the variance. Similarly, less variance is often accompanied by more bias. <span style=\"color: red;\">Flexible models tend to be unbiased, but highly variable. Simple models are often extremely biased, but have low variance.</span>\n\nIn the context of regression, models are biased when:\n\n- Parametric: The form of the model [does not incorporate all the necessary variables](https://en.wikipedia.org/wiki/Omitted-variable_bias), or the form of the relationship is too simple. For example, a parametric model assumes a linear relationship, but the true relationship is quadratic.\n- Non-parametric: The model provides too much smoothing.\n\nIn the context of regression, models are variable when:\n\n- Parametric: The form of the model incorporates too many variables, or the form of the relationship is too flexible. For example, a parametric model assumes a cubic relationship, but the true relationship is linear.\n- Non-parametric: The model does not provide enough smoothing. It is very, \"wiggly.\" [Recall our KNN model example from Content 08](https://ssc442kirkpatrick.netlify.app/content/08-content/#k-nearest-neighbors-1)\n\nSo for us, to select a model that appropriately balances the tradeoff between bias and variance, and thus minimizes the reducible error, we need to select a model of the appropriate flexibility for the data.\n\nRecall that when fitting models, we've seen that train RMSE decreases as model flexibility is increasing. (Technically it is non-increasing.) For validation RMSE, we expect to see a U-shaped curve. Importantly, validation RMSE decreases, until a certain flexibility, then begins to increase.\n\n\n::: {.cell layout-align=\"center\" hash='10a_cache/html/unnamed-chunk-2_406d71d29c740abd743645639c05a169'}\n\n:::\n\n\nNow we can understand why this is happening. The expected test RMSE is essentially the expected prediction error, which we now known decomposes into (squared) bias, variance, and the irreducible Bayes error. The following plots show three examples of this.\n\n\n::: {.cell layout-align=\"center\" hash='10a_cache/html/unnamed-chunk-3_3ff91ed600e8b4494d10aed026a51ae8'}\n::: {.cell-output-display}\n![](10a_files/figure-html/unnamed-chunk-3-1.png){fig-align='center' width=1152}\n:::\n:::\n\n\nThe three plots show three examples of the bias-variance tradeoff. In the left panel, the variance influences the expected prediction error more than the bias. In the right panel, the opposite is true. The middle panel is somewhat neutral. In all cases, the difference between the Bayes error (the horizontal dashed grey line) and the expected prediction error (the solid black curve) is exactly the mean squared error, which is the sum of the squared bias (blue curve) and variance (orange curve). The vertical line indicates the flexibility that minimizes the prediction error.\n\nTo summarize, if we assume that irreducible error can be written as\n\n$$\n\\mathbb{V}[Y \\mid X = x] = \\sigma ^ 2\n$$\n\nthen we can write the full decomposition of the expected prediction error of predicting $Y$ using $\\hat{f}$ when $X = x$ as\n\n$$\n\\text{EPE}\\left(Y, \\hat{f}(x)\\right) =\n\\underbrace{\\text{bias}^2\\left(\\hat{f}(x)\\right) + \\text{var}\\left(\\hat{f}(x)\\right)}_\\textrm{reducible error} + \\sigma^2.\n$$\n\nAs model flexibility increases, bias decreases, while variance increases. By understanding the tradeoff between bias and variance, we can manipulate model flexibility to find a model that will predict well on unseen observations.\n\n\n::: {.cell layout-align=\"center\" hash='10a_cache/html/error-vs-flex_763486d1b688580f5d0ffafc57f43443'}\n::: {.cell-output-display}\n![](10a_files/figure-html/error-vs-flex-1.png){fig-align='center' width=960}\n:::\n:::\n\n\nTying this all together, the above image shows how we \"expect\" training and validation error to behavior in relation to model flexibility.^[Someday, someone will tell you this is a lie. They aren't wrong. In modern deep learning, there is a concept called [Deep Double Descent](https://openai.com/blog/deep-double-descent/). See also @belkin2018reconciling.] In practice, we won't always see such a nice \"curve\" in the validation error, but we expect to see the general trends.\n\n## Using Simulation to Estimate Bias and Variance\n\nWe will illustrate these decompositions, most importantly the bias-variance tradeoff, through simulation. Suppose we would like to train a model to learn the true regression function function $f(x) = x^2$.\n\n\n::: {.cell layout-align=\"center\" hash='10a_cache/html/unnamed-chunk-4_10e1caa171c7bbb7fa5930b03f3827bd'}\n\n```{.r .cell-code}\nf = function(x) {\n  x ^ 2\n}\n```\n:::\n\n\nMore specifically, we'd like to predict an observation, $Y$, given that $X = x$ by using $\\hat{f}(x)$ where\n\n$$\n\\mathbb{E}[Y \\mid X = x] = f(x) = x^2\n$$\n\nand\n\n$$\n\\mathbb{V}[Y \\mid X = x] = \\sigma ^ 2.\n$$\n\nAlternatively, we could write this as\n\n$$\nY = f(X) + \\epsilon\n$$\n\nwhere $\\mathbb{E}[\\epsilon] = 0$ and $\\mathbb{V}[\\epsilon] = \\sigma ^ 2$. In this formulation, we call $f(X)$ the **signal** and $\\epsilon$ the **noise**.\n\nTo carry out a concrete simulation example, we need to fully specify the data generating process. We do so with the following `R` code.\n\n\n::: {.cell layout-align=\"center\" hash='10a_cache/html/unnamed-chunk-5_62c9373585608a100281d303ce277d8f'}\n\n```{.r .cell-code}\ngen_sim_data = function(f, sample_size = 100) {\n  x = runif(n = sample_size, min = 0, max = 1)\n  y = rnorm(n = sample_size, mean = f(x), sd = 0.3)\n  tibble(x, y)\n}\n```\n:::\n\n\nAlso note that if you prefer to think of this situation using the $Y = f(X) + \\epsilon$ formulation, the following code represents the same data generating process.\n\n\n::: {.cell layout-align=\"center\" hash='10a_cache/html/unnamed-chunk-6_e468cf88a5a93d8b058263df1785c0af'}\n\n```{.r .cell-code}\ngen_sim_data = function(f, sample_size = 100) {\n  x = runif(n = sample_size, min = 0, max = 1)\n  eps = rnorm(n = sample_size, mean = 0, sd = 0.3)\n  y = f(x) + eps\n  tibble(x, y)\n}\n```\n:::\n\n\nTo completely specify the data generating process, we have made more model assumptions than simply $\\mathbb{E}[Y \\mid X = x] = x^2$ and $\\mathbb{V}[Y \\mid X = x] = \\sigma ^ 2$. In particular,\n\n- The $x_i$ in $\\mathcal{D}$ are sampled from a uniform distribution over $[0, 1]$.\n- The $x_i$ and $\\epsilon$ are independent.\n- The $y_i$ in $\\mathcal{D}$ are sampled from the conditional normal distribution.\n\n$$\nY \\mid X \\sim N(f(x), \\sigma^2)\n$$\n\nUsing this setup, we will generate datasets, $\\mathcal{D}$, with a sample size $n = 100$ and fit four models.\n\n$$\n\\begin{aligned}\n\\texttt{predict(fit0, x)} &= \\hat{f}_0(x) = \\hat{\\beta}_0\\\\\n\\texttt{predict(fit1, x)} &= \\hat{f}_1(x) = \\hat{\\beta}_0 + \\hat{\\beta}_1 x \\\\\n\\texttt{predict(fit2, x)} &= \\hat{f}_2(x) = \\hat{\\beta}_0 + \\hat{\\beta}_1 x + \\hat{\\beta}_2 x^2 \\\\\n\\texttt{predict(fit9, x)} &= \\hat{f}_9(x) = \\hat{\\beta}_0 + \\hat{\\beta}_1 x + \\hat{\\beta}_2 x^2 + \\ldots + \\hat{\\beta}_9 x^9\n\\end{aligned}\n$$\n\nTo get a sense of the data and these four models, we generate one simulated dataset, and fit the four models.\n\n\n::: {.cell layout-align=\"center\" hash='10a_cache/html/unnamed-chunk-7_a4184fa6605e98e7a7c785f7562071ec'}\n\n```{.r .cell-code}\nset.seed(1)\nsim_data = gen_sim_data(f)\n```\n:::\n\n::: {.cell layout-align=\"center\" hash='10a_cache/html/unnamed-chunk-8_b86432cb6bbdabb4f90899bbb00f8e78'}\n\n```{.r .cell-code}\nfit_0 = lm(y ~ 1,                   data = sim_data)\nfit_1 = lm(y ~ poly(x, degree = 1), data = sim_data)\nfit_2 = lm(y ~ poly(x, degree = 2), data = sim_data)\nfit_9 = lm(y ~ poly(x, degree = 9), data = sim_data)\n```\n:::\n\n\nNote that technically we're being lazy and using orthogonal polynomials, but the fitted values are the same, so this makes no difference for our purposes. These could be KNN, or decision trees just the same - the principle still applies.\n\nPlotting these four trained models, we see that the zero predictor model does very poorly. The first degree model is reasonable, but we can see that the second degree model fits much better. The ninth degree model seem rather wild.\n\n\n::: {.cell layout-align=\"center\" hash='10a_cache/html/unnamed-chunk-9_2410b087a7060f25c5f42b894f9a24db'}\n::: {.cell-output-display}\n![](10a_files/figure-html/unnamed-chunk-9-1.png){fig-align='center' width=864}\n:::\n:::\n\n\nThe following three plots were created using three additional simulated datasets. The zero predictor and ninth degree polynomial were fit to each.\n\n\n::: {.cell layout-align=\"center\" hash='10a_cache/html/unnamed-chunk-10_96fd3f5b04d0f1771ef9ff6ee68b2398'}\n::: {.cell-output-display}\n![](10a_files/figure-html/unnamed-chunk-10-1.png){fig-align='center' width=1152}\n:::\n:::\n\n\nThis plot should make clear the difference between the bias and variance of these two models. The zero predictor model is clearly wrong, that is, biased, but nearly the same for each of the datasets, since it has very low variance.\n\nWhile the ninth degree model doesn't appear to be correct for any of these three simulations, we'll see that on average it is, and thus is performing unbiased estimation. These plots do however clearly illustrate that the ninth degree polynomial is extremely variable. Each dataset results in a very different fitted model. Correct on average isn't the only goal we're after, since in practice, we'll only have a single dataset. This is why we'd also like our models to exhibit low variance.\n\nWe could have also fit $k$-nearest neighbors models to these three datasets.\n\n\n::: {.cell layout-align=\"center\" hash='10a_cache/html/unnamed-chunk-11_05a51dfaeb921dd37aa60d743ffb9c9b'}\n::: {.cell-output-display}\n![](10a_files/figure-html/unnamed-chunk-11-1.png){fig-align='center' width=1152}\n:::\n:::\n\n\nHere we see that when $k = 100$ we have a biased model with very low variance.^[It's actually the same as the 0 predictor linear model. Can you see why?] When $k = 5$, we again have a highly variable model.\n\nThese two sets of plots reinforce our intuition about the bias-variance tradeoff. Flexible models (ninth degree polynomial and $k$ = 5) are highly variable, and often unbiased. Simple models (zero predictor linear model and $k = 100$) are very biased, but have extremely low variance.\n\nWe will now complete a simulation study to understand the relationship between the bias, variance, and mean squared error for the estimates of $f(x)$ given by these four models at the point $x = 0.90$. We use simulation to complete this task, as performing the analytical calculations would prove to be rather tedious and difficult.\n\n\n::: {.cell layout-align=\"center\" hash='10a_cache/html/unnamed-chunk-12_989e073cf712eaf14da5cd5fb4be192e'}\n\n```{.r .cell-code}\nset.seed(1)\nn_sims = 250\nn_models = 4\nx = data.frame(x = 0.90) # fixed point at which we make predictions\npredictions = matrix(0, nrow = n_sims, ncol = n_models)\n```\n:::\n\n::: {.cell layout-align=\"center\" hash='10a_cache/html/unnamed-chunk-13_2868d68f7c9ba1bc1f0bcf138f4f925e'}\n\n```{.r .cell-code}\nfor (sim in 1:n_sims) {\n\n  # simulate new, random, training data\n  # this is the only random portion of the bias, var, and mse calculations\n  # this allows us to calculate the expectation over D\n  sim_data = gen_sim_data(f)\n\n  # fit models\n  fit_0 = lm(y ~ 1,                   data = sim_data)\n  fit_1 = lm(y ~ poly(x, degree = 1), data = sim_data)\n  fit_2 = lm(y ~ poly(x, degree = 2), data = sim_data)\n  fit_9 = lm(y ~ poly(x, degree = 9), data = sim_data)\n\n  # get predictions\n  predictions[sim, 1] = predict(fit_0, x)\n  predictions[sim, 2] = predict(fit_1, x)\n  predictions[sim, 3] = predict(fit_2, x)\n  predictions[sim, 4] = predict(fit_9, x)\n}\n```\n:::\n\n::: {.cell layout-align=\"center\" hash='10a_cache/html/unnamed-chunk-14_455a0554e5b127e02a304747e39847c9'}\n\n:::\n\n\nNote that this is one of many ways we could have accomplished this task using `R`. For example we could have used a combination of `replicate()` and `*apply()` functions. Alternatively, we could have used a [`tidyverse`](https://www.tidyverse.org/) approach, which likely would have used some combination of [`dplyr`](http://dplyr.tidyverse.org/), [`tidyr`](http://tidyr.tidyverse.org/), and [`purrr`](http://purrr.tidyverse.org/).\n\nOur approach, which would be considered a `base` `R` approach, was chosen to make it as clear as possible what is being done. The `tidyverse` approach is rapidly gaining popularity in the `R` community, but might make it more difficult to see what is happening here, unless you are already familiar with that approach.\n\nAlso of note, while it may seem like the output stored in `predictions` would meet the definition of [tidy data](http://vita.had.co.nz/papers/tidy-data.html) given by [Hadley Wickham](http://hadley.nz/) since each row represents a simulation, it actually falls slightly short. For our data to be tidy, a row should store the simulation number, the model, and the resulting prediction. We've actually already aggregated one level above this. Our observational unit is a simulation (with four predictions), but for tidy data, it should be a single prediction.\n\n\n::: {.cell layout-align=\"center\" hash='10a_cache/html/unnamed-chunk-15_a5cbf53cc56a3f875db3ccd782ecfe0a'}\n::: {.cell-output-display}\n![](10a_files/figure-html/unnamed-chunk-15-1.png){fig-align='center' width=864}\n:::\n:::\n\n\nThe above plot shows the predictions for each of the 250 simulations of each of the four models of different polynomial degrees. The truth, $f(x = 0.90) = (0.9)^2 = 0.81$, is given by the solid black horizontal line.\n\nTwo things are immediately clear:\n\n- As flexibility *increases*, **bias decreases**. The mean of a model's predictions is closer to the truth.\n- As flexibility *increases*, **variance increases**. The variance about the mean of a model's predictions increases.\n\nThe goal of this simulation study is to show that the following holds true for each of the four models.\n\n$$\n\\text{MSE}\\left(f(0.90), \\hat{f}_k(0.90)\\right) =\n\\underbrace{\\left(\\mathbb{E} \\left[ \\hat{f}_k(0.90) \\right] - f(0.90) \\right)^2}_{\\text{bias}^2 \\left(\\hat{f}_k(0.90) \\right)} +\n\\underbrace{\\mathbb{E} \\left[ \\left( \\hat{f}_k(0.90) - \\mathbb{E} \\left[ \\hat{f}_k(0.90) \\right] \\right)^2 \\right]}_{\\text{var} \\left(\\hat{f}_k(0.90) \\right)}\n$$\n\nWe'll use the empirical results of our simulations to estimate these quantities. (Yes, we're using estimation to justify facts about estimation.) Note that we've actually used a rather small number of simulations. In practice we should use more, but for the sake of computation time, we've performed just enough simulations to obtain the desired results. (Since we're estimating estimation, the bigger the sample size, the better.)\n\nTo estimate the mean squared error of our predictions, we'll use\n\n$$\n\\widehat{\\text{MSE}}\\left(f(0.90), \\hat{f}_k(0.90)\\right) = \\frac{1}{n_{\\texttt{sims}}}\\sum_{i = 1}^{n_{\\texttt{sims}}} \\left(f(0.90) - \\hat{f}_k^{[i]}(0.90) \\right)^2\n$$\n\nwhere $\\hat{f}_k^{[i]}(0.90)$ is the estimate of $f(0.90)$ using the $i$-th from the polynomial degree $k$ model.\n\nWe also write an accompanying `R` function.\n\n\n::: {.cell layout-align=\"center\" hash='10a_cache/html/unnamed-chunk-16_cdacd2e1abce9c612edda897a8afeeca'}\n\n```{.r .cell-code}\nget_mse = function(truth, estimate) {\n  mean((estimate - truth) ^ 2)\n}\n```\n:::\n\n\nSimilarly, for the bias of our predictions we use,\n\n$$\n\\widehat{\\text{bias}} \\left(\\hat{f}(0.90) \\right)  = \\frac{1}{n_{\\texttt{sims}}}\\sum_{i = 1}^{n_{\\texttt{sims}}} \\left(\\hat{f}_k^{[i]}(0.90) \\right) - f(0.90)\n$$\n\nAnd again, we write an accompanying `R` function.\n\n\n::: {.cell layout-align=\"center\" hash='10a_cache/html/unnamed-chunk-17_14b2059eb71aa67bc0d0a16e983ecbdc'}\n\n```{.r .cell-code}\nget_bias = function(estimate, truth) {\n  mean(estimate) - truth\n}\n```\n:::\n\n\nLastly, for the variance of our predictions we have\n\n$$\n\\widehat{\\text{var}} \\left(\\hat{f}(0.90) \\right) = \\frac{1}{n_{\\texttt{sims}}}\\sum_{i = 1}^{n_{\\texttt{sims}}} \\left(\\hat{f}_k^{[i]}(0.90) - \\frac{1}{n_{\\texttt{sims}}}\\sum_{i = 1}^{n_{\\texttt{sims}}}\\hat{f}_k^{[i]}(0.90) \\right)^2\n$$\n\nWhile there is already `R` function for variance, the following is more appropriate in this situation.\n\n\n::: {.cell layout-align=\"center\" hash='10a_cache/html/unnamed-chunk-18_e7724245fe7b213bb14b7cf99e4f630c'}\n\n```{.r .cell-code}\nget_var = function(estimate) {\n  mean((estimate - mean(estimate)) ^ 2)\n}\n```\n:::\n\n\nTo quickly obtain these results for each of the four models, we utilize the `apply()` function.\n\n\n::: {.cell layout-align=\"center\" hash='10a_cache/html/unnamed-chunk-19_b12faededdd0ce73f8feffc54c8c6c73'}\n\n```{.r .cell-code}\nbias = apply(predictions, MAR = 2, get_bias, truth = f(x = 0.90))\nvariance = apply(predictions, MAR = 2, get_var)\nmse = apply(predictions, MAR = 2, get_mse, truth = f(x = 0.90))\n```\n:::\n\n\nWe summarize these results in the following table.\n\n\n::: {.cell layout-align=\"center\" asis='true' hash='10a_cache/html/unnamed-chunk-20_9f1450b6dc57a0ea7cf99bf1a648c320'}\n::: {.cell-output-display}\n| Degree | Mean Squared Error | Bias Squared | Variance |\n|:------:|:------------------:|:------------:|:--------:|\n|   0    |      0.22643       |   0.22476    | 0.00167  |\n|   1    |      0.00829       |   0.00508    | 0.00322  |\n|   2    |      0.00387       |   0.00005    | 0.00381  |\n|   9    |      0.01019       |   0.00002    | 0.01017  |\n:::\n:::\n\n\nA number of things to notice here:\n\n- We use squared bias in this table. Since bias can be positive or negative, squared bias is more useful for observing the trend as flexibility increases.\n- The squared bias trend which we see here is **decreasing** as flexibility increases, which we expect to see in general.\n- The exact opposite is true of variance. As model flexibility increases, variance **increases**.\n- The mean squared error, which is a function of the bias and variance, decreases, then increases. This is a result of the bias-variance tradeoff. We can decrease bias, by increasing variance. Or, we can decrease variance by increasing bias. By striking the correct balance, we can find a good mean squared error!\n\nWe can check for these trends with the `diff()` function in `R`.\n\n\n::: {.cell layout-align=\"center\" hash='10a_cache/html/unnamed-chunk-21_a11d305ac20e1091c5452fa90b92fcac'}\n\n```{.r .cell-code}\nall(diff(bias ^ 2) < 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nall(diff(variance) > 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\ndiff(mse) < 0\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    1     2     9 \n TRUE  TRUE FALSE \n```\n:::\n:::\n\n\nThe models with polynomial degrees 2 and 9 are both essentially unbiased. We see some bias here as a result of using simulation. If we increased the number of simulations, we would see both biases go down. Since they are both unbiased, the model with degree 2 outperforms the model with degree 9 due to its smaller variance.\n\nModels with degree 0 and 1 are biased because they assume the wrong form of the regression function. While the degree 9 model does this as well, it does include all the necessary polynomial degrees.\n\n$$\n\\hat{f}_9(x) = \\hat{\\beta}_0 + \\hat{\\beta}_1 x + \\hat{\\beta}_2 x^2 + \\ldots + \\hat{\\beta}_9 x^9\n$$\n\nThen, since least squares estimation is unbiased, importantly,\n\n$$\n\\mathbb{E}\\left[\\hat{\\beta}_d\\right] = \\beta_d = 0\n$$\n\nfor $d = 3, 4, \\ldots 9$, we have\n\n$$\n\\mathbb{E}\\left[\\hat{f}_9(x)\\right] = \\beta_0 + \\beta_1 x + \\beta_2 x^2\n$$\n\nNow we can finally verify the bias-variance decomposition.\n\n\n::: {.cell layout-align=\"center\" hash='10a_cache/html/unnamed-chunk-22_f35ad819838af67647ff0b3b551ab8dd'}\n\n```{.r .cell-code}\nbias ^ 2 + variance == mse\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    0     1     2     9 \nFALSE FALSE  TRUE  TRUE \n```\n:::\n:::\n\n\nBut wait, this says it isn't true, except for the degree 9 model? It turns out, this is simply a computational issue. If we allow for some very small error tolerance, we see that the bias-variance decomposition is indeed true for predictions from these for models.\n\n\n::: {.cell layout-align=\"center\" hash='10a_cache/html/unnamed-chunk-23_ffcac5ccab1b799962ee0cb3ca669592'}\n\n```{.r .cell-code}\nall.equal(bias ^ 2 + variance, mse)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\nSee `?all.equal()` for details.\n\nSo far, we've focused our efforts on looking at the mean squared error of estimating $f(0.90)$ using $\\hat{f}(0.90)$. We could also look at the expected prediction error of using $\\hat{f}(X)$ when $X = 0.90$ to estimate $Y$.\n\n$$\n\\text{EPE}\\left(Y, \\hat{f}_k(0.90)\\right) =\n\\mathbb{E}_{Y \\mid X, \\mathcal{D}} \\left[  \\left(Y - \\hat{f}_k(X) \\right)^2 \\mid X = 0.90 \\right]\n$$\n\nWe can estimate this quantity for each of the four models using the simulation study we already performed.\n\n\n::: {.cell layout-align=\"center\" hash='10a_cache/html/unnamed-chunk-24_9f4c1aa07a91c71ce91a79473689391c'}\n\n```{.r .cell-code}\nget_epe = function(realized, estimate) {\n  mean((realized - estimate) ^ 2)\n}\n```\n:::\n\n::: {.cell layout-align=\"center\" hash='10a_cache/html/unnamed-chunk-25_1e8d2f60819bcf809d03c762f9df7138'}\n\n```{.r .cell-code}\ny = rnorm(n = nrow(predictions), mean = f(x = 0.9), sd = 0.3)\nepe = apply(predictions, 2, get_epe, realized = y)\nepe\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        0         1         2         9 \n0.3180470 0.1104055 0.1095955 0.1205570 \n```\n:::\n:::\n\n::: {.cell layout-align=\"center\" hash='10a_cache/html/unnamed-chunk-26_c8912c31486e725e2a5d7a64178a5fa2'}\n\n:::\n\n\nWhat about the unconditional expected prediction error. That is, for any $X$, not just $0.90$. Specifically, the expected prediction error of estimating $Y$ using $\\hat{f}(X)$. The following (new) simulation study provides an estimate of\n\n$$\n\\text{EPE}\\left(Y, \\hat{f}_k(X)\\right) = \\mathbb{E}_{X, Y, \\mathcal{D}} \\left[  \\left( Y - \\hat{f}_k(X) \\right)^2 \\right]\n$$\n\nfor the quadratic model, that is $k = 2$ as we have defined $k$.\n\n\n::: {.cell layout-align=\"center\" hash='10a_cache/html/unnamed-chunk-27_959f5c90f426e02460dcf70b34d8a9de'}\n\n```{.r .cell-code}\nset.seed(42)\nn_sims = 2500\nX = runif(n = n_sims, min = 0, max = 1)\nY = rnorm(n = n_sims, mean = f(X), sd = 0.3)\n\nf_hat_X = rep(0, length(X))\n\nfor (i in seq_along(X)) {\n  sim_data = gen_sim_data(f)\n  fit_2 = lm(y ~ poly(x, degree = 2), data = sim_data)\n  f_hat_X[i] = predict(fit_2, newdata = data.frame(x = X[i]))\n}\n```\n:::\n\n::: {.cell layout-align=\"center\" hash='10a_cache/html/unnamed-chunk-28_da25f58b0174f66b53ca80e5b485e5d0'}\n\n```{.r .cell-code}\n# truth\n0.3 ^ 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.09\n```\n:::\n\n```{.r .cell-code}\n# via simulation\nmean((Y - f_hat_X) ^ 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.09566445\n```\n:::\n:::\n\n\nNote that in practice, we should use many more simulations in this study.\n\n## Estimating Expected Prediction Error\n\nWhile previously, we only decomposed the expected prediction error conditionally, a similar argument holds unconditionally.\n\nAssuming\n\n$$\n\\mathbb{V}[Y \\mid X = x] = \\sigma ^ 2.\n$$\n\nwe have\n\n$$\n\\text{EPE}\\left(Y, \\hat{f}(X)\\right) =\n\\mathbb{E}_{X, Y, \\mathcal{D}} \\left[  (Y - \\hat{f}(X))^2 \\right] =\n\\underbrace{\\mathbb{E}_{X} \\left[\\text{bias}^2\\left(\\hat{f}(X)\\right)\\right] + \\mathbb{E}_{X} \\left[\\text{var}\\left(\\hat{f}(X)\\right)\\right]}_\\textrm{reducible error} + \\sigma^2\n$$\n\nLastly, we note that if\n\n$$\n\\mathcal{D} = \\mathcal{D}_{\\texttt{trn}} \\cup \\mathcal{D}_{\\texttt{tst}} = (x_i, y_i) \\in \\mathbb{R}^p \\times \\mathbb{R}, \\ i = 1, 2, \\ldots n\n$$\n\nwhere\n\n$$\n\\mathcal{D}_{\\texttt{trn}} = (x_i, y_i) \\in \\mathbb{R}^p \\times \\mathbb{R}, \\ i \\in \\texttt{trn}\n$$\n\nand\n\n$$\n\\mathcal{D}_{\\texttt{tst}} = (x_i, y_i) \\in \\mathbb{R}^p \\times \\mathbb{R}, \\ i \\in \\texttt{tst}\n$$\n\nThen, if we have a model fit to the training data $\\mathcal{D}_{\\texttt{trn}}$, we can use the test mean squared error\n\n$$\n\\sum_{i \\in \\texttt{tst}}\\left(y_i - \\hat{f}(x_i)\\right) ^ 2\n$$\n\nas an estimate of\n\n$$\n\\mathbb{E}_{X, Y, \\mathcal{D}} \\left[  (Y - \\hat{f}(X))^2 \\right]\n$$\n\nthe expected prediction error.^[In practice we prefer RMSE to MSE for comparing models and reporting because of the units.]\n\nHow good is this estimate? Well, if $\\mathcal{D}$ is a random sample from $(X, Y)$, and the $\\texttt{tst}$ data are randomly sampled observations randomly sampled from $i = 1, 2, \\ldots, n$, then it is a reasonable estimate. However, it is rather variable due to the randomness of selecting the observations for the test set, if the test set is small.\n\n## Model Flexibility\n\nLet's return to the simulated dataset we used occaisionally in the linear regression content. Recall there was a single feature $x$ with the following properties:\n\n\n::: {.cell layout-align=\"center\" hash='10a_cache/html/unnamed-chunk-29_beb287a7c02deed588486c02db3fc277'}\n\n```{.r .cell-code}\n# define regression function\ncubic_mean = function(x) {\n  1 - 2 * x - 3 * x ^ 2 + 5 * x ^ 3\n}\n```\n:::\n\n\nWe then generated some data around this function with some added noise:\n\n\n::: {.cell layout-align=\"center\" hash='10a_cache/html/unnamed-chunk-30_323b8e82b16c441e07e959a7ab27096f'}\n\n```{.r .cell-code}\n# define full data generating process\ngen_slr_data = function(sample_size = 100, mu) {\n  x = runif(n = sample_size, min = -1, max = 1)\n  y = mu(x) + rnorm(n = sample_size)\n  tibble(x, y)\n}\n```\n:::\n\n\nAfter defining the data generating process, we generate and split the data.\n\n\n::: {.cell layout-align=\"center\" hash='10a_cache/html/unnamed-chunk-31_08c4b1b59c8e207365188b9bd2ae9aea'}\n\n```{.r .cell-code}\n# simulate entire dataset\nset.seed(3)\nsim_slr_data = gen_slr_data(sample_size = 100, mu = cubic_mean)\n\n# test-train split\nslr_trn_idx = sample(nrow(sim_slr_data), size = 0.8 * nrow(sim_slr_data))\nslr_trn = sim_slr_data[slr_trn_idx, ]\nslr_tst = sim_slr_data[-slr_trn_idx, ]\n\n# estimation-validation split\nslr_est_idx = sample(nrow(slr_trn), size = 0.8 * nrow(slr_trn))\nslr_est = slr_trn[slr_est_idx, ]\nslr_val = slr_trn[-slr_est_idx, ]\n\n# check data\nhead(slr_trn, n = 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 Ã— 2\n        x      y\n    <dbl>  <dbl>\n 1  0.573 -1.18 \n 2  0.807  0.576\n 3  0.272 -0.973\n 4 -0.813 -1.78 \n 5 -0.161  0.833\n 6  0.736  1.07 \n 7 -0.242  2.97 \n 8  0.520 -1.64 \n 9 -0.664  0.269\n10 -0.777 -2.02 \n```\n:::\n:::\n\n\nFor validating models, we will use RMSE.\n\n\n::: {.cell layout-align=\"center\" hash='10a_cache/html/unnamed-chunk-32_63fa703eba92764e410e9bb0495b6c3e'}\n\n```{.r .cell-code}\n# helper function for calculating RMSE\ncalc_rmse = function(actual, predicted) {\n  sqrt(mean((actual - predicted) ^ 2))\n}\n```\n:::\n\n\nLet's check how linear, k-nearest neighbors, and decision tree models fit to this data make errors, while paying attention to their flexibility.\n\n\n::: {.cell layout-align=\"center\" hash='10a_cache/html/error-vs-flex_763486d1b688580f5d0ffafc57f43443'}\n::: {.cell-output-display}\n![](10a_files/figure-html/error-vs-flex-1.png){fig-align='center' width=960}\n:::\n:::\n\n\nThis picture is an idealized version of what we expect to see, but we'll illustrate the sorts of validate \"curves\" that we might see in practice.\n\nNote that in the following three sub-sections, a significant portion of the code is suppressed for visual clarity. See the source document for full details.\n\n### Linear Models\n\nFirst up, linear models. We will fit polynomial models with degree from one to nine, and then validate.\n\n\n::: {.cell layout-align=\"center\" hash='10a_cache/html/unnamed-chunk-33_8833781388fc351694c64ff652063022'}\n\n```{.r .cell-code}\n# fit polynomial models\npoly_mod_est_list = list(\n  poly_mod_1_est = lm(y ~ poly(x, degree = 1), data = slr_est),\n  poly_mod_2_est = lm(y ~ poly(x, degree = 2), data = slr_est),\n  poly_mod_3_est = lm(y ~ poly(x, degree = 3), data = slr_est),\n  poly_mod_4_est = lm(y ~ poly(x, degree = 4), data = slr_est),\n  poly_mod_5_est = lm(y ~ poly(x, degree = 5), data = slr_est),\n  poly_mod_6_est = lm(y ~ poly(x, degree = 6), data = slr_est),\n  poly_mod_7_est = lm(y ~ poly(x, degree = 7), data = slr_est),\n  poly_mod_8_est = lm(y ~ poly(x, degree = 8), data = slr_est),\n  poly_mod_9_est = lm(y ~ poly(x, degree = 9), data = slr_est)\n)\n```\n:::\n\n::: {.cell layout-align=\"center\" hash='10a_cache/html/unnamed-chunk-34_51e05a1047d4882565dd7fa867fcefb0'}\n\n:::\n\n\nThe plot below visualizes the results.\n\n\n::: {.cell layout-align=\"center\" hash='10a_cache/html/unnamed-chunk-35_ac9197080cbed62900b167b2003678e0'}\n::: {.cell-output-display}\n![](10a_files/figure-html/unnamed-chunk-35-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nWhat do we see here? As the polynomial degree *increases*:\n\n- The training error *decreases*.\n- The validation error *decreases*, then *increases*.\n\nThis more of less matches the idealized version above, but the validation \"curve\" is much more jagged. This is something that we can expect in practice.\n\nWe have previously noted that training error isn't particularly useful for validating models. That is still true. However, it can be useful for checking that everything is working as planned. In this case, since we known that training error decreases as model flexibility increases, we can verify our intuition that a higher degree polynomial is indeed more flexible.^[In practice, if you already know how your model's flexibility works, by checking that the training error goes down as you increase flexibility, you can check that you have done your coding and model training correctly.]\n\n### k-Nearest Neighbors\n\nNext up, k-nearest neighbors. We will consider values for $k$ that are odd and between $1$ and $45$ inclusive.\n\n\n::: {.cell layout-align=\"center\" hash='10a_cache/html/unnamed-chunk-36_786f3566617291b5cbb8e31f86b85774'}\n\n```{.r .cell-code}\n# helper function for fitting knn models\nfit_knn_mod = function(neighbors) {\n  knnreg(y ~ x, data = slr_est, k = neighbors)\n}\n```\n:::\n\n::: {.cell layout-align=\"center\" hash='10a_cache/html/unnamed-chunk-37_69e2db627c5dd4c3a6e34d1ee46a67b1'}\n\n```{.r .cell-code}\n# define values of tuning parameter k to evaluate\nk_to_try = seq(from = 1, to = 45, by = 2)\n\n# fit knn models\nknn_mod_est_list = lapply(k_to_try, fit_knn_mod)\n```\n:::\n\n::: {.cell layout-align=\"center\" hash='10a_cache/html/unnamed-chunk-38_f3a164409e4eeedb838f1ade15b5a054'}\n\n:::\n\n\nThe plot below visualizes the results.\n\n\n::: {.cell layout-align=\"center\" hash='10a_cache/html/unnamed-chunk-39_dc2888929e1fbd5f33f0856809cabf5b'}\n::: {.cell-output-display}\n![](10a_files/figure-html/unnamed-chunk-39-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nHere we see the \"opposite\" of the usual plot. Why? Because with k-nearest neighbors, a small value of $k$ generates a flexible model compared to larger values of $k$. So visually, this plot is flipped. That is we see that as $k$ *increases*:\n\n- The training error *increases*.\n- The validation error *decreases*, then *increases*.\n\nImportant to note here: the pattern above only holds \"in general,\" that is, there can be minor deviations in the validation pattern along the way. This is due to the random nature of selection the data for the validate set.\n\n### Decision Trees\n\nLastly, we evaluate some decision tree models. We choose some arbitrary values of `cp` to evaluate, while holding `minsplit` constant at `5`. There are arbitrary choices that produce a plot that is useful for discussion.\n\n\n::: {.cell layout-align=\"center\" hash='10a_cache/html/unnamed-chunk-40_068c6c1350e88efd1732c5ecc42e0c35'}\n\n```{.r .cell-code}\n# helper function for fitting decision tree models\ntree_knn_mod = function(flex) {\n  rpart(y ~ x, data = slr_est, cp = flex, minsplit = 5)\n}\n```\n:::\n\n::: {.cell layout-align=\"center\" hash='10a_cache/html/unnamed-chunk-41_a211f4da3beaca434392a702aaf4bcac'}\n\n```{.r .cell-code}\n# define values of tuning parameter cp to evaluate\ncp_to_try = c(0.5, 0.3, 0.1, 0.05, 0.01, 0.001, 0.0001)\n\n# fit decision tree models\ntree_mod_est_list = lapply(cp_to_try, tree_knn_mod)\n```\n:::\n\n::: {.cell layout-align=\"center\" hash='10a_cache/html/unnamed-chunk-42_f7a1e06567a84e8130456b758d69b4f6'}\n\n:::\n\n\nThe plot below visualizes the results.\n\n\n::: {.cell layout-align=\"center\" hash='10a_cache/html/unnamed-chunk-43_bce11c00bb6dcdcac34b1f831c872b64'}\n::: {.cell-output-display}\n![](10a_files/figure-html/unnamed-chunk-43-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nBased on this plot, how is `cp` related to model flexibility?^[As `cp` increases, model flexibility decreases.]\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}