{
  "hash": "44e333501f1dd2c41460230c41e1fa63",
  "result": {
    "markdown": "---\ntitle: \"Working with R and RStudio\"\nlinktitle: \"1: Introduction to R\"\nread_date: \"2024-01-11\"\nlastmod: \"2024-08-14\"\noutput:\n  blogdown::html_page:\n    toc: true\nmenu:\n  example:\n    parent: Examples\n    weight: 1\ntype: docs\nweight: 1\neditor_options:\n  chunk_output_type: console\n---\n\n\n\n\n\n# Frontmatter (Spring 2024)\nI like to use this spot to publish course announcements. Not so much for y'all, but more so I remember. If you see any announcements that don't say \"Spring 2024\" there's a good chance it's leftover from earlier course offerings.\n\n### Participation extra credit\nA careful read of our syllabus under \"class participation\" will show that I do give extra credit for answering questions and (mainly) sharing completed R coding tasks. That is, we'll walk through some examples, and when we hit a \"try it\", I'll ask you to give it a go. Then, after a few minutes, I'll ask if anyone wants to share their answer. You get one point of participation extra credit. Five points is worth 1% of a grade boost, so these aren't negligible points.\n\n### Assignment / Exercises\nThe Assignments page has all of our weekly lab assignments (including Week 1, due on Monday at 11:59pm). The assignments often have a preamble and some code that has to be used to set you up for the questions. **The questions to be completed and turned in are under \"Exercises\" at the very end**.\n\n### Don't Slide into My DMs\nI don't like to use the DM feature of Slack. Not because I don't like getting DMs, but because the point of Slack is so we can all learn together. If you have a question, even if you're worried it's a silly question, then *others* will, I promise, have the same question. Asking in the public channel will answer everyone's question at once. Related to this: you should check the Slack to see if your question has already been asked.\n\nAnother reason is that the TA will often be faster at responding than I will be, depending on day of week and time of day (I start my day before some of you even go to bed). If you DM me, the TA can't see it and can't reply.\n\n\n# Introduction to Examples\n\nExamples in this class are designed to be presented in-class. Accordingly, the notes here are *not* comprehensive. Instead, they are intended to guide students through\n\nI'm also aware that my writing is dry and lifeless. If you're reading this online without the advantage of seeing it in person, don't worry---I'll be \"funnier\" in class.^[Comments from previous classes indicate that I am not, in fact, funny.]\n\n\n# `R` basics {#r-basics}\nasd\n\n::: {.callout-tip}\n# Keys to success\nThe course content below should be considered a prerequisite for success. For those concerned about basics of `R`, you absolutely must read this content and attempt the coding exercises. If you struggle to follow the content, please contact the professor or TA.\n:::\n  \n  \nIn this class, we will be using `R` software environment for all our analyses. You will learn `R` and data analysis techniques simultaneously. To follow along you will therefore need access to `R`. We also recommend the use of an _integrated development environment_ (IDE), such as RStudio, to save your work.\n\nNote that it is common for a course or workshop to offer access to an `R` environment and an IDE through your web browser, as done by RStudio/Posit cloud^[https://posit.cloud]. If you have access to such a resource, you don't need to install `R` and RStudio. However, if you intend on becoming a practicing data analyst, we highly recommend installing these tools on your computer^[https://rafalab.github.io/dsbook/installing-r-rstudio.html]. This is not hard.\n\n::: {.callout-tip}\n**ALERT**\n\nRStudio, the separate _integrated development environment_ (IDE) commonly used to run `R` has re-branded. I haven't the foggiest as to why. The name is now **Posit**, so if you clicked on a link that says **RStudio** and you got **Posit**, that's fine.\n:::\n\n## Installing R and ~~R Studio~~ Posit and Review Resources\nBoth `R` and ~~RStudio~~ Posit are free and available online. If you have not yet done so, you'll need to install both R and ~~RStudio~~ Posit. See the [Installing page of our course resources](/resource/install/) for instructions. This will be part of your assignment for this week. \n\n\nProfessor Kirkpatrick (the other instructor for this course) has created a video walkthrough for the basics of using `R` for another course, but it is useful here. You can [see part A here (labeled \"Part 2a\") here <i class=\"fas fa-film\"></i>](https://mediaspace.msu.edu/media/R+Part+2a/1_kmszjw36)] and [part B here (labeled \"Part 2b\")  <i class=\"fas fa-film\"></i>](https://mediaspace.msu.edu/media/R+Part+2b/1_c0vf0i63). You should already be at this level of familiarity with R, but if you need a review, this is a good place to start.\n\n\n## The (very) basics of `R`\n\nBefore we get started with the motivating dataset, we need to cover the very basics of `R`. \n\n### Objects\n\nSuppose a relatively math unsavvy student asks us for help solving several quadratic equations of the form $ax^2+bx+c = 0$. You---a savvy student---recall that the quadratic formula gives us the solutions: \n  \n$$\n  \\frac{-b + \\sqrt{b^2 - 4ac}}{2a}\\,\\, \\mbox{ and } \\frac{-b - \\sqrt{b^2 - 4ac}}{2a}\n$$\n  \n  which of course depend on the values of $a$, $b$, and $c$. That is, the quadratic equation represents a *function* with three *arguments*.\n\nOne advantage of programming languages is that we can define variables and write expressions with these variables, similar to how we do so in math, but obtain a numeric solution. We will write out general code for the quadratic equation below, but if we are asked to solve $x^2 + x -1 = 0$, then we define:\n  \n\n::: {.cell}\n\n```{.r .cell-code}\na <- 1\nb <- 1\nc <- -1\n```\n:::\n\n\nwhich stores the values for later use. We use `<-` to assign values to the variables.\n\nWe can also assign values using `=` instead of `<-`, but some recommend against using `=` to avoid confusion.^[This is, without a doubt, my least favorite aspect of `R`. I'd even venture to call it stupid. The logic behind this pesky `<-` is a total mystery to me, but there *is* logic to avoiding `=`. But, you do you.]\n\n::: {.callout-tip}\n\n## TRY IT\n\nCopy and paste the code above into your console to define the three variables. Note that `R` does not print anything when we make this assignment. This means the objects were defined successfully. Had you made a mistake, you would have received an error message. Throughout these written notes, you'll have the most success if you continue to copy code into your own console.\n:::\n  \n  To see the value stored in a variable, we simply ask `R` to evaluate `a` and it shows the stored value:\n  \n\n::: {.cell}\n\n```{.r .cell-code}\na\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n:::\n\n\nA more explicit way to ask `R` to show us the value stored in `a` is using `print` like this:\n  \n\n::: {.cell}\n\n```{.r .cell-code}\nprint(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n:::\n\n\nWe use the term _object_ to describe stuff that is stored in `R`.  Variables are examples, but objects can also be more complicated entities such as functions, which are described later.\n\n### The workspace\n\nAs we define objects in the console, we are actually changing the _workspace_. You can see all the variables saved in your workspace by typing:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nls()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"a\"      \"b\"      \"c\"      \"filter\"\n```\n:::\n:::\n\n\n(Note that one of *my* variables listed above comes from generating the graphs above). In ~~RStudio~~ Posit, the _Environment_ tab shows the values:\n  \n![](/img/rstudio-environment.png)\n\nWe should see  `a`, `b`, and `c`. If you try to recover the value of a variable that is not in your workspace, you receive an error. For example, if you type `x` you will receive the following message: `Error: object 'x' not found`.\n\nNow since these values are saved in variables, to obtain a solution to our equation, we use the quadratic formula:\n  \n\n::: {.cell}\n\n```{.r .cell-code}\n(-b + sqrt(b^2 - 4*a*c) ) / ( 2*a )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.618034\n```\n:::\n\n```{.r .cell-code}\n(-b - sqrt(b^2 - 4*a*c) ) / ( 2*a )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -1.618034\n```\n:::\n:::\n\n\n\n### Functions\n\nOnce you define variables, the data analysis process can usually be described as a series of *functions* applied to the data. `R` includes several zillion predefined functions and most of the analysis pipelines we construct make extensive use of the built-in functions. But `R`'s power comes from its scalability. We have access to (nearly) infinite functions via `install.packages` and `library`. As we go through the course, we will carefully note new functions we bring to each problem. For now, though, we will stick to the basics.\n\nNote that you've used a function already: you used the function `sqrt` to solve the quadratic equation above. These functions do not appear in the workspace because you did not define them, but they are available for immediate use.\n\nIn general, we need to use parentheses to evaluate a function. If you type `ls`, the function is not evaluated and instead `R` shows you the code that defines the function. If you type `ls()` the function is evaluated and, as seen above, we see objects in the workspace.\n\nUnlike `ls`, most functions require one or more _arguments_. Below is an example of how we assign an object to the argument of the function `log`. Remember that we earlier defined `a` to be 1:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlog(8)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2.079442\n```\n:::\n\n```{.r .cell-code}\nlog(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n:::\n\n\nYou can find out what the function expects and what it does by reviewing the very useful manuals included in `R`.  You can get help by using the `help` function like this:\n  \n\n::: {.cell}\n\n```{.r .cell-code}\nhelp(\"log\")\n```\n:::\n\n\nFor most functions, we can also use this shorthand:\n  \n\n::: {.cell}\n\n```{.r .cell-code}\n?log\n```\n:::\n\n\nThe help page will show you what arguments the function is expecting. For example, `log` needs `x` and `base` to run. However, some arguments are required and others are optional. You can determine which arguments are optional by noting in the help document that a default value is assigned with `=`. Defining these is optional.^[This equals sign is the reasons we assign values with `<-`; then when arguments of a function are assigned values, we don't end up with multiple equals signs. But... who cares.] For example, the base of the function `log` defaults to `base = exp(1)`---that is, `log` evaluates the natural log by default.\n\nIf you want a quick look at the arguments without opening the help system, you can type:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nargs(log)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfunction (x, base = exp(1)) \nNULL\n```\n:::\n:::\n\n\nYou can change the default values by simply assigning another object:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlog(8, base = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n:::\n\n\nNote that we have not been specifying the argument `x` as such:\n\n::: {.cell}\n\n```{.r .cell-code}\nlog(x = 8, base = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n:::\n\n\nThe above code works, but we can save ourselves some typing: if no argument name is used, `R` assumes you are entering arguments in the order shown in the help file or by `args`. So by not using the names, it assumes the arguments are `x` followed by `base`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlog(8,2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n:::\n\n\nIf using the arguments' names, then we can include them in whatever order we want:\n  \n\n::: {.cell}\n\n```{.r .cell-code}\nlog(base = 2, x = 8)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n:::\n\n\nTo specify arguments, we must use `=`, and cannot use `<-`.\n\nThere are some exceptions to the rule that functions need the parentheses to be evaluated. Among these, the most commonly used are the arithmetic and relational operators. For example:\n  \n\n::: {.cell}\n\n```{.r .cell-code}\n2 ^ 3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 8\n```\n:::\n:::\n\n\nYou can see the arithmetic operators by typing:\n  \n\n::: {.cell}\n\n```{.r .cell-code}\nhelp(\"+\")\n```\n:::\n\n\nor\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?\"+\"\n```\n:::\n\n\nand the relational operators by typing:\n  \n\n::: {.cell}\n\n```{.r .cell-code}\nhelp(\">\")\n```\n:::\n\n\nor\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?\">\"\n```\n:::\n\n\n### Other prebuilt objects\n\nThere are several datasets that are included for users to practice and test out functions. You can see all the available datasets by typing:\n  \n\n::: {.cell}\n\n```{.r .cell-code}\ndata()\n```\n:::\n\n\nThis shows you the object name for these datasets. These datasets are objects that can be used by simply typing the name. For example, if you type:\n  \n\n::: {.cell}\n\n```{.r .cell-code}\nco2\n```\n:::\n\n\n`R` will show you Mauna Loa atmospheric $CO^2$ concentration data.\n\nOther prebuilt objects are mathematical quantities, such as the constant $\\pi$ and $\\infty$:\n  \n\n::: {.cell}\n\n```{.r .cell-code}\npi\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3.141593\n```\n:::\n\n```{.r .cell-code}\nInf+1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] Inf\n```\n:::\n:::\n\n\n### Variable names\n\nWe have used the letters `a`, `b`, and `c` as variable names, but variable names can be almost anything. Some basic rules in `R` are that variable names have to start with a letter, can't contain spaces, and should not be variables that are predefined in `R`.  For example, don't name one of your variables `install.packages` by typing something like `install.packages <- 2`. Usually, `R` is smart enough to prevent you from doing such nonsense, but it's important to develop good habits.\n\nA nice convention to follow is to use meaningful words that describe what is stored, use only lower case, and use underscores as a substitute for spaces. For the quadratic equations, we could use something like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsolution_1 <- (-b + sqrt(b^2 - 4*a*c)) / (2*a)\nsolution_2 <- (-b - sqrt(b^2 - 4*a*c)) / (2*a)\n```\n:::\n\n\nFor more advice, we highly recommend studying (Hadley Wickham's style guide)[http://adv-r.had.co.nz/Style.html].\n\n### Saving your workspace\n\nValues remain in the workspace until you end your session or erase them with the function `rm`. But workspaces also can be saved for later use. In fact, when you quit R, the program asks you if you want to save your workspace. If you do save it, the next time you start R, the program will restore the workspace.\n\nWe actually recommend against saving the workspace this way because, as you start working on different projects, it will become harder to keep track of what is saved. Instead, we recommend you assign the workspace a specific name. You can do this by using the function `save` or `save.image`. To load, use the function `load`. When saving a workspace, we recommend the suffix `rda` or `RData`. In RStudio, you can also do this by navigating to the _Session_ tab and choosing _Save Workspace as_. You can later load it using the _Load Workspace_ options in the same tab.\nYou can read the help pages on  `save`, `save.image`, and  `load` to learn more.\n\n\n### Motivating scripts\n\nTo solve another equation such as $3x^2 + 2x -1$, we can copy and paste the code above and then redefine the variables and recompute the solution:\n  \n\n::: {.cell}\n\n```{.r .cell-code}\na <- 3\nb <- 2\nc <- -1\n(-b + sqrt(b^2 - 4*a*c)) / (2*a)\n(-b - sqrt(b^2 - 4*a*c)) / (2*a)\n```\n:::\n\n\nBy creating and saving a script with the code above, we would not need to retype everything each time and, instead, simply change the variable names. Try writing the script above into an editor and notice how easy it is to change the variables and receive an answer.\n\nThe answer you get from the 4th and 5th lines will depend on the values of `a`, `b`, and `c`. **If** you were to type new numbers directly into your console: `c = 5.33` then re-run the last two lines, you will get a different answer. Your R \"environment\" is affected by what is run from a script **and** by what you type in the console. It is good (and necessary) practice to write all your code in a script (or in your Rmarkdown document), and run from the script. Always. Periodically running a script fresh from the start (clearing everything out of the environment first) is a good idea as well. \n\n### Commenting your code\n\nIf a line of `R` code starts with the symbol `#`, it is not evaluated. We can use this to write reminders of why we wrote particular code. For example, in the script above we could add:\n  \n  \n\n::: {.cell}\n\n```{.r .cell-code}\n## Code to compute solution to quadratic equation of the form ax^2 + bx + c\n## define the variables\na <- 3\nb <- 2\nc <- -1\n\n## now compute the solution\n(-b + sqrt(b^2 - 4*a*c)) / (2*a)\n(-b - sqrt(b^2 - 4*a*c)) / (2*a)\n```\n:::\n\n\n\n:::fyi\n\n**TRY IT**\n  \n  1. What is the sum of the first 100 positive integers? The formula for the sum of integers $1$ through $n$ is $n(n+1)/2$. Define $n=100$ and then use `R` to compute the sum of $1$ through $100$ using the formula. What is the sum?\n  \n  2. Now use the same formula to compute the sum of the integers from 1 through 1,000.\n\n3. Look at the result of typing the following code into R:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 1000\nx <- seq(1, n)\nsum(x)\n```\n:::\n\n\nBased on the result, what do you think the functions `seq` and `sum` do?  You can use `help`.\n\na. `sum` creates a list of numbers and `seq` adds them up.\nb. `seq` creates a list of numbers and `sum` adds them up.\nc. `seq` creates a random list and `sum` computes the sum of 1 through 1,000.\nd. `sum` always returns the same number.\n\n4. In math and programming, we say that we evaluate a function when we replace the argument with a given number. So if we type `sqrt(4)`, we evaluate the `sqrt` function. In R, you can evaluate a function inside another function. The evaluations happen from the inside out.  Use one line of code to compute the log, in base 10, of the square root of 100.\n\n\n5. Which of the following will always return the numeric value stored in `x`? You can try out examples and use the help system if you want.\n\na. `log(10^x)`\nb. `log10(x^10)`\nc. `log(exp(x))`\nd. `exp(log(x, base = 2))`\n:::\n  \n  ## Data types\n  \n  Variables in `R` can be of different types. For example, we need to distinguish numbers from character strings and tables from simple lists of numbers. The function `class` helps us determine what type of object we have:\n  \n\n::: {.cell}\n\n```{.r .cell-code}\na <- 2\nclass(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"numeric\"\n```\n:::\n:::\n\n\nTo work efficiently in R, it is important to learn the different types of variables and what we can do with these.\n\n### Data frames {#data-frames}\n\nUp to now, the variables we have defined are just one number. This is not very useful for storing data. The most common way of storing a dataset in `R` is in a _data frame_. Conceptually, we can think of a data frame as a table with rows representing observations and the different variables reported for each observation defining the columns. Data frames are particularly useful for datasets because we can combine different data types into one object.\n\nA large proportion of data analysis challenges start with data stored in a data frame. For example, we stored the data for our motivating example in a data frame. You can access this dataset by loading the __dslabs__ library and loading the `murders` dataset using the `data` function:\n  \n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dslabs)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'dslabs' was built under R version 4.3.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'dslabs'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:gapminder':\n\n    gapminder\n```\n:::\n\n```{.r .cell-code}\ndata(murders)\n```\n:::\n\n\nTo see that this is in fact a data frame, we type:\n  \n\n::: {.cell}\n\n```{.r .cell-code}\nclass(murders)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"data.frame\"\n```\n:::\n:::\n\n\n### Examining an object\n\nThe function `str` is useful for finding out more about the structure of an object:\n  \n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(murders)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t51 obs. of  5 variables:\n$ state : chr \"Alabama\" \"Alaska\" \"Arizona\" \"Arkansas\" ...\n$ abb : chr \"AL\" \"AK\" \"AZ\" \"AR\" ...\n$ region : Factor w/ 4 levels \"Northeast\",\"South\",..: 2 4 4 2 4 4 1 2 2 2 ...\n$ population: num 4779736 710231 6392017 2915918 37253956 ...\n$ total : num 135 19 232 93 1257 ...\n```\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\nThis tells us much more about the object. We see that the table has 51 rows (50 states plus DC) and five variables. We can show the first six lines using the function `head`:\n  \n\n::: {.cell}\n\n```{.r .cell-code}\nhead(murders)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       state abb region population total\n1    Alabama  AL  South    4779736   135\n2     Alaska  AK   West     710231    19\n3    Arizona  AZ   West    6392017   232\n4   Arkansas  AR  South    2915918    93\n5 California  CA   West   37253956  1257\n6   Colorado  CO   West    5029196    65\n```\n:::\n:::\n\n\nIn this dataset, each state is considered an observation and five variables are reported for each state.\n\nBefore we go any further in answering our original question about different states, let's learn more about the components of this object.\n\n### The accessor: `$`\n\nFor our analysis, we will need to access the different variables represented by columns included in this data frame. To do this, we use the accessor operator `$` in the following way:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmurders$population\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  4779736   710231  6392017  2915918 37253956  5029196  3574097   897934\n [9]   601723 19687653  9920000  1360301  1567582 12830632  6483802  3046355\n[17]  2853118  4339367  4533372  1328361  5773552  6547629  9883640  5303925\n[25]  2967297  5988927   989415  1826341  2700551  1316470  8791894  2059179\n[33] 19378102  9535483   672591 11536504  3751351  3831074 12702379  1052567\n[41]  4625364   814180  6346105 25145561  2763885   625741  8001024  6724540\n[49]  1852994  5686986   563626\n```\n:::\n:::\n\n\nBut how did we know to use `population`? Previously, by applying the function `str` to the object `murders`, we revealed the names for each of the five variables stored in this table. We can quickly access the variable names using:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(murders)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"state\"      \"abb\"        \"region\"     \"population\" \"total\"     \n```\n:::\n:::\n\n\nIt is important to know that the order of the entries in `murders$population` preserves the order of the rows in our data table. This will later permit us to manipulate one variable based on the results of another. For example, we will be able to order the state names by the number of murders.\n\n**Tip**: `R` comes with a very nice auto-complete functionality that saves us the trouble of typing out all the names. Try typing `murders$p` then hitting the <kbd>tab</kbd> key on your keyboard. This functionality and many other useful auto-complete features are available when working in RStudio.\n\n### Vectors: numerics, characters, and logical\n\nThe object `murders$population` is not one number but several. We call these types of objects _vectors_. A single number is technically a vector of length 1, but in general we use the term vectors to refer to objects with several entries. The function `length` tells you how many entries are in the vector:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npop <- murders$population\nlength(pop)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 51\n```\n:::\n:::\n\n\nThis particular vector is _numeric_ since population sizes are numbers:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(pop)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"numeric\"\n```\n:::\n:::\n\nIn a numeric vector, every entry must be a number.\n\nTo store character strings, vectors can also be of class _character_. For example, the state names are characters:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(murders$state)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n:::\n\n\nAs with numeric vectors, all entries in a character vector need to be a character.\n\nAnother important type of vectors are _logical vectors_. These must be either `TRUE` or `FALSE`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nz <- 3 == 2\nz\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nclass(z)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"logical\"\n```\n:::\n:::\n\n\nHere the `==` is a relational operator asking if 3 is equal to 2. In `R`, if you just use one `=`, you actually assign a variable, but if you use two `==` you test for equality. Yet another reason to avoid assigning via `=`... it can get confusing and typos can really mess things up.\n\nYou can see the other _relational operators_ by typing:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?Comparison\n```\n:::\n\n\nIn future sections, you will see how useful relational operators can be.\n\nWe discuss more important features of vectors after the next set of exercises.\n\n\n**Advanced**: Mathematically, the values in `pop` are integers and there is an integer class in `R`.  However, by default, numbers are assigned class numeric even when they are round integers. For example, `class(1)` returns numeric. You can turn them into class integer with the `as.integer()` function or by adding an `L` like this: `1L`. Note the class by typing: `class(1L)`\n\n\n### Factors {#factors}\n\nIn the `murders` dataset, we might expect the region to also be a character vector. However, it is not:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(murders$region)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"factor\"\n```\n:::\n:::\n\n\nIt is a _factor_. Factors are useful for storing categorical data. We can see that there are only 4 regions by using the `levels` function:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlevels(murders$region)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Northeast\"     \"South\"         \"North Central\" \"West\"         \n```\n:::\n:::\n\n\nIn the background, `R` stores these _levels_ as integers and keeps a map to keep track of the labels. This is more memory efficient than storing all the characters. It is also useful for computational reasons we'll explore later.\n\nNote that the levels have an order that is different from the order of appearance in the factor object. The default in `R` is for the levels to follow alphabetical order. However, often we want the levels to follow a different order. You can specify an order through the `levels` argument when creating the factor with the `factor` function. For example, in the murders dataset regions are ordered from east to west.  The function `reorder` lets us change the order of the levels of a factor variable based on a summary computed on a numeric vector. We will demonstrate this with a simple example, and will see more advanced ones in the Data Visualization part of the book.\n\n\nSuppose we want the levels of the region by the total number of murders rather than alphabetical order. If there are values associated with each level, we can use the `reorder` and specify a data summary to determine the order. The following code takes the sum of the total murders in each region, and reorders the factor following these sums.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nregion <- murders$region\nvalue <- murders$total\nregion <- reorder(region, value, FUN = sum)\nlevels(region)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Northeast\"     \"North Central\" \"West\"          \"South\"        \n```\n:::\n:::\n\n\nThe new order is in agreement with the fact that the Northeast has the least murders and the South has the most.\n\n**Warning**: Factors can be a source of confusion since sometimes they behave like characters and sometimes they do not. As a result, confusing factors and characters are a common source of bugs.\n\n### Lists\n\nData frames are a special case of _lists_. We will cover lists in more detail later, but know that they are useful because you can store any combination of different types. Below is an example of a list we created for you:\n  \n  \n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrecord\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$name\n[1] \"John Doe\"\n\n$student_id\n[1] 1234\n\n$grades\n[1] 95 82 91 97 93\n\n$final_grade\n[1] \"A\"\n```\n:::\n\n```{.r .cell-code}\nclass(record)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"list\"\n```\n:::\n:::\n\n\nAs with data frames, you can extract the components of a list with the accessor `$`. In fact, data frames are a type of list.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrecord$student_id\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1234\n```\n:::\n:::\n\n\nWe can also use double square brackets (`[[`) like this:\n  \n\n::: {.cell}\n\n```{.r .cell-code}\nrecord[[\"student_id\"]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1234\n```\n:::\n:::\n\n\nYou should get used to the fact that in `R` there are often several ways to do the same thing. such as accessing entries.^[Whether you view this as a feature or a bug is a good indicator whether you'll enjoy working with `R`.]\n\nYou might also encounter lists without variable names.\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrecord2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] \"John Doe\"\n\n[[2]]\n[1] 1234\n```\n:::\n:::\n\n\nIf a list does not have names, you cannot extract the elements with `$`, but you can still use the brackets method and instead of providing the variable name, you provide the list index, like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrecord2[[1]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"John Doe\"\n```\n:::\n:::\n\n\n\nWe won't be using lists until later, but you might encounter one in your own exploration of `R`.  For this reason, we show you some basics here.\n\n\n### Matrices {#matrices}\n\nMatrices are another type of object that are common in `R`.  Matrices are similar to data frames in that they are two-dimensional: they have rows and columns. However, like numeric, character and logical vectors, entries in matrices have to be all the same type. For this reason data frames are much more useful for storing data, since we can have characters, factors, and numbers in them.\n\nYet matrices have a major advantage over data frames: we can perform matrix algebra operations, a powerful type of mathematical technique. We do not describe these operations in this class, but much of what happens in the background when you perform a data analysis involves matrices. We describe them briefly here since some of the functions we will learn return matrices.\n\nWe can define a matrix using the `matrix` function. We need to specify the number of rows and columns.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmat <- matrix(1:12, 4, 3)\nmat\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    1    5    9\n[2,]    2    6   10\n[3,]    3    7   11\n[4,]    4    8   12\n```\n:::\n:::\n\n\nYou can access specific entries in a matrix using square brackets (`[`). If you want the second row, third column, you use:\n  \n\n::: {.cell}\n\n```{.r .cell-code}\nmat[2, 3]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10\n```\n:::\n:::\n\n\nIf you want the entire second row, you leave the column spot empty:\n  \n\n::: {.cell}\n\n```{.r .cell-code}\nmat[2, ]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  2  6 10\n```\n:::\n:::\n\n\nNotice that this returns a vector, not a matrix.\n\nSimilarly, if you want the entire third column, you leave the row spot empty:\n  \n\n::: {.cell}\n\n```{.r .cell-code}\nmat[, 3]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  9 10 11 12\n```\n:::\n:::\n\n\nThis is also a vector, not a matrix.\n\nYou can access more than one column or more than one row if you like. This will give you a new matrix.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmat[, 2:3]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2]\n[1,]    5    9\n[2,]    6   10\n[3,]    7   11\n[4,]    8   12\n```\n:::\n:::\n\n\nYou can subset both rows and columns:\n  \n\n::: {.cell}\n\n```{.r .cell-code}\nmat[1:2, 2:3]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2]\n[1,]    5    9\n[2,]    6   10\n```\n:::\n:::\n\n\nWe can convert matrices into data frames using the function `as.data.frame`:\n  \n\n::: {.cell}\n\n```{.r .cell-code}\nas.data.frame(mat)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  V1 V2 V3\n1  1  5  9\n2  2  6 10\n3  3  7 11\n4  4  8 12\n```\n:::\n:::\n\n\nYou can also use single square brackets (`[`) to access rows and columns of a data frame:\n  \n\n::: {.cell}\n\n```{.r .cell-code}\ndata(\"murders\")\nmurders[25, 1]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Mississippi\"\n```\n:::\n\n```{.r .cell-code}\nmurders[2:3, ]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    state abb region population total\n2  Alaska  AK   West     710231    19\n3 Arizona  AZ   West    6392017   232\n```\n:::\n:::\n\n\n\n:::fyi\n\n**TRY IT**\n  \n  1. Load the US murders dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dslabs)\ndata(murders)\n```\n:::\n\n\nUse the function `str` to examine the structure of the `murders` object. Which of the following best describes the variables represented in this data frame?\n  \na. The 51 states.\nb. The murder rates for all 50 states and DC.\nc. The state name, the abbreviation of the state name, the state's region, and the state's population and total number of murders for 2010.\nd. `str` shows no relevant information.\n\n2. What are the column names used by the data frame for these five variables?\n  \n3. Use the accessor `$` to extract the state abbreviations and assign them to the object `a`. What is the class of this object?\n  \n4. Now use the square brackets to extract the state abbreviations and assign them to the object `b`. Use the `identical` function to determine if `a` and `b` are the same.\n\n5. We saw that the `region` column stores a factor. You can corroborate this by typing:\n  \n\n::: {.cell}\n\n```{.r .cell-code}\nclass(murders$region)\n```\n:::\n\n\nWith one line of code, use the function `levels` and `length` to determine the number of regions defined by this dataset.\n\n6. The function `table` takes a vector and returns the frequency of each element. You can quickly see how many states are in each region by applying this function. Use this function in one line of code to create a table of states per region.\n:::\n  \n  \n##  Vectors\n  \nIn R, the most basic objects available to store data are _vectors_. As we have seen, complex datasets can usually be broken down into components that are vectors. For example, in a data frame, each column is a vector. Here we learn more about this important class.\n\n### Creating vectors\n\nWe can create vectors using the function `c`, which stands for _concatenate_. We use `c` to concatenate entries in the following way:\n  \n\n::: {.cell}\n\n```{.r .cell-code}\ncodes <- c(380, 124, 818)\ncodes\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 380 124 818\n```\n:::\n:::\n\n\nWe can also create character vectors. We use the quotes to denote that the entries are characters rather than variable names.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncountry <- c(\"italy\", \"canada\", \"egypt\")\n```\n:::\n\n\nIn `R` you can also use single quotes:\n  \n\n::: {.cell}\n\n```{.r .cell-code}\ncountry <- c('italy', 'canada', 'egypt')\n```\n:::\n\n\nBut be careful not to confuse the single quote ' with the _back quote_, which shares a keyboard key with <kbd>~</kbd>.\n\nBy now you should know that if you type:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncountry <- c(italy, canada, egypt)\n```\n:::\n\nyou receive an error because the variables `italy`, `canada`, and `egypt` are not defined. If we do not use the quotes, `R` looks for variables with those names and returns an error.\n\n### Names\n\nSometimes it is useful to name the entries of a vector. For example, when defining a vector of country codes, we can use the names to connect the two:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncodes <- c(italy = 380, canada = 124, egypt = 818)\ncodes\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n italy canada  egypt \n   380    124    818 \n```\n:::\n:::\n\n\nThe object `codes` continues to be a numeric vector:\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(codes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"numeric\"\n```\n:::\n:::\n\nbut with names:\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(codes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"italy\"  \"canada\" \"egypt\" \n```\n:::\n:::\n\n\nIf the use of strings without quotes looks confusing, know that you can use the quotes as well:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncodes <- c(\"italy\" = 380, \"canada\" = 124, \"egypt\" = 818)\ncodes\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n italy canada  egypt \n   380    124    818 \n```\n:::\n:::\n\n\nThere is no difference between this function call and the previous one. This is one of the many ways in which `R` is quirky compared to other languages.\n\n\n### Sequences\n\nAnother useful function for creating vectors generates sequences:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseq(1, 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  1  2  3  4  5  6  7  8  9 10\n```\n:::\n:::\n\n\nThe first argument defines the start, and the second defines the end which is included. The default is to go up in increments of 1, but a third argument lets us tell it how much to jump by:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseq(1, 10, 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 3 5 7 9\n```\n:::\n:::\n\n\nIf we want consecutive integers, we can use the following shorthand:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1:10\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  1  2  3  4  5  6  7  8  9 10\n```\n:::\n:::\n\n\nWhen we use these functions, `R` produces integers, not numerics, because they are typically used to index something:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(1:10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"integer\"\n```\n:::\n:::\n\n\nHowever, if we create a sequence including non-integers, the class changes:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(seq(1, 10, 0.5))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"numeric\"\n```\n:::\n:::\n\n\n### Subsetting\n\nWe use square brackets to access specific elements of a vector. For the vector `codes` we defined above, we can access the second element using:\n\n::: {.cell}\n\n```{.r .cell-code}\ncodes[2]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ncanada \n   124 \n```\n:::\n:::\n\n\nYou can get more than one entry by using a multi-entry vector as an index:\n\n::: {.cell}\n\n```{.r .cell-code}\ncodes[c(1,3)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nitaly egypt \n  380   818 \n```\n:::\n:::\n\n\nThe sequences defined above are particularly useful if we want to access, say, the first two elements:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncodes[1:2]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n italy canada \n   380    124 \n```\n:::\n:::\n\n\nIf the elements have names, we can also access the entries using these names. Below are two examples.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncodes[\"canada\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ncanada \n   124 \n```\n:::\n\n```{.r .cell-code}\ncodes[c(\"egypt\",\"italy\")]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\negypt italy \n  818   380 \n```\n:::\n:::\n\n\n## Coercion\n\nIn general, _coercion_ is an attempt by `R` to be flexible with data types. When an entry does not match the expected, some of the prebuilt `R` functions try to guess what was meant before throwing an error. This can also lead to confusion. Failing to understand _coercion_ can drive programmers crazy when attempting to code in `R` since it behaves quite differently from most other languages in this regard. Let's learn about it with some examples.\n\nWe said that vectors must be all of the same type. So if we try to combine, say, numbers and characters, you might expect an error:\n  \n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(1, \"canada\", 3)\n```\n:::\n\n\nBut we don't get one, not even a warning! What happened? Look at `x` and its class:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"1\"      \"canada\" \"3\"     \n```\n:::\n\n```{.r .cell-code}\nclass(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n:::\n\n\nR _coerced_ the data into characters. It guessed that because you put a character string in the vector, you meant the 1 and 3 to actually be character strings `\"1\"` and \"`3`\". The fact that not even a warning is issued is an example of how coercion can cause many unnoticed errors in `R`. \n\nR also offers functions to change from one type to another. For example, you can turn numbers into characters with:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 1:5\ny <- as.character(x)\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"1\" \"2\" \"3\" \"4\" \"5\"\n```\n:::\n:::\n\n\nYou can turn it back with `as.numeric`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas.numeric(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3 4 5\n```\n:::\n:::\n\n\nThis function is actually quite useful since datasets that include numbers as character strings are common.\n\n### Not availables (NA)\n\nThis \"topic\" seems to be wholly unappreciated and it has been our experience that students often panic when encountering an `NA`. This often happens when a function tries to coerce one type to another and encounters an impossible case. In such circumstances, `R` usually gives us a warning and turns the entry into a special value called an `NA` (for \"not available\").  For example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(\"1\", \"b\", \"3\")\nas.numeric(x)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: NAs introduced by coercion\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  1 NA  3\n```\n:::\n:::\n\n\nR does not have any guesses for what number you want when you type `b`, so it does not try.\n\nWhile coercion is a common case leading to `NA`s, you'll see them in nearly every real-world dataset. Most often, you will encounter the `NA`s as a stand-in for missing data. Again, this a common problem in real-world datasets and you need to be aware that it will come up.\n\n## Sorting\n\nNow that we have mastered some basic `R` knowledge (ha!), let's try to gain some insights into the safety of different states in the context of gun murders.\n\n### `sort`\n\nSay we want to rank the states from least to most gun murders. The function `sort` sorts a vector in increasing order. We can therefore see the largest number of gun murders by typing:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dslabs)\ndata(murders)\nsort(murders$total)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]    2    4    5    5    7    8   11   12   12   16   19   21   22   27   32\n[16]   36   38   53   63   65   67   84   93   93   97   97   99  111  116  118\n[31]  120  135  142  207  219  232  246  250  286  293  310  321  351  364  376\n[46]  413  457  517  669  805 1257\n```\n:::\n:::\n\n\nHowever, this does not give us information about which states have which murder totals. For example, we don't know which state had 1257.\n\n### `order`\n\nThe function `order` is closer to what we want. It takes a vector as input and returns the vector of indexes that sorts the input vector. This may sound confusing so let's look at a simple example. We can create a vector and sort it:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(31, 4, 15, 92, 65)\nsort(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  4 15 31 65 92\n```\n:::\n:::\n\n\nRather than sort the input vector, the function `order` returns the index that sorts input vector:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nindex <- order(x)\nx[index]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  4 15 31 65 92\n```\n:::\n:::\n\n\nThis is the same output as that returned by `sort(x)`. If we look at this index, we see why it works:\n\n::: {.cell}\n\n```{.r .cell-code}\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 31  4 15 92 65\n```\n:::\n\n```{.r .cell-code}\norder(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2 3 1 5 4\n```\n:::\n:::\n\n\nThe second entry of `x` is the smallest, so `order(x)` starts with `2`. The next smallest is the third entry, so the second entry is `3` and so on.\n\nHow does this help us order the states by murders? First, remember that the entries of vectors you access with `$` follow the same order as the rows in the table. For example, these two vectors containing state names and abbreviations, respectively, are matched by their order:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmurders$state[1:6]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Alabama\"    \"Alaska\"     \"Arizona\"    \"Arkansas\"   \"California\"\n[6] \"Colorado\"  \n```\n:::\n\n```{.r .cell-code}\nmurders$abb[1:6]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"AL\" \"AK\" \"AZ\" \"AR\" \"CA\" \"CO\"\n```\n:::\n:::\n\n\nThis means we can order the state names by their total murders. We first obtain the index that orders the vectors according to murder totals and then index the state names vector:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nind <- order(murders$total)\nmurders$abb[ind]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"VT\" \"ND\" \"NH\" \"WY\" \"HI\" \"SD\" \"ME\" \"ID\" \"MT\" \"RI\" \"AK\" \"IA\" \"UT\" \"WV\" \"NE\"\n[16] \"OR\" \"DE\" \"MN\" \"KS\" \"CO\" \"NM\" \"NV\" \"AR\" \"WA\" \"CT\" \"WI\" \"DC\" \"OK\" \"KY\" \"MA\"\n[31] \"MS\" \"AL\" \"IN\" \"SC\" \"TN\" \"AZ\" \"NJ\" \"VA\" \"NC\" \"MD\" \"OH\" \"MO\" \"LA\" \"IL\" \"GA\"\n[46] \"MI\" \"PA\" \"NY\" \"FL\" \"TX\" \"CA\"\n```\n:::\n:::\n\n\nAccording to the above, California had the most murders.\n\n### `max` and `which.max`\n\nIf we are only interested in the entry with the largest value, we can use `max` for the value:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmax(murders$total)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1257\n```\n:::\n:::\n\n\nand `which.max` for the index of the largest value:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ni_max <- which.max(murders$total)\nmurders$state[i_max]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"California\"\n```\n:::\n:::\n\n\n\nFor the minimum, we can use `min` and `which.min` in the same way.\n\nDoes this mean California is the most dangerous state? In an upcoming section, we argue that we should be considering rates instead of totals. Before doing that, we introduce one last order-related function: `rank`.\n\n### `rank`\n\nAlthough not as frequently used as `order` and `sort`, the function `rank` is also related to order and can be useful.\nFor any given vector it returns a vector with the rank of the first entry, second entry, etc., of the input vector. Here is a simple example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(31, 4, 15, 92, 65)\nrank(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3 1 2 5 4\n```\n:::\n:::\n\n\nTo summarize, let's look at the results of the three functions we have introduced:\n  \n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-striped\" style=\"width: auto !important; margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:right;\"> original </th>\n   <th style=\"text-align:right;\"> sort </th>\n   <th style=\"text-align:right;\"> order </th>\n   <th style=\"text-align:right;\"> rank </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:right;\"> 31 </td>\n   <td style=\"text-align:right;\"> 4 </td>\n   <td style=\"text-align:right;\"> 2 </td>\n   <td style=\"text-align:right;\"> 3 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 4 </td>\n   <td style=\"text-align:right;\"> 15 </td>\n   <td style=\"text-align:right;\"> 3 </td>\n   <td style=\"text-align:right;\"> 1 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 15 </td>\n   <td style=\"text-align:right;\"> 31 </td>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:right;\"> 2 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 92 </td>\n   <td style=\"text-align:right;\"> 65 </td>\n   <td style=\"text-align:right;\"> 5 </td>\n   <td style=\"text-align:right;\"> 5 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 65 </td>\n   <td style=\"text-align:right;\"> 92 </td>\n   <td style=\"text-align:right;\"> 4 </td>\n   <td style=\"text-align:right;\"> 4 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n\n### Beware of recycling\n\nAnother common source of unnoticed errors in `R` is the use of _recycling_. We saw that vectors are added elementwise. So if the vectors don't match in length, it is natural to assume that we should get an error. But we don't. Notice what happens:\n  \n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(1,2,3)\ny <- c(10, 20, 30, 40, 50, 60, 70)\nx+y\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in x + y: longer object length is not a multiple of shorter object\nlength\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 11 22 33 41 52 63 71\n```\n:::\n:::\n\nWe do get a warning, but no error. For the output, `R` has recycled the numbers in `x`. Notice the last digit of numbers in the output.\n\n\n:::fyi\n\n**TRY IT**\n  \nFor these exercises we will use the US murders dataset. Make sure you load it prior to starting.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dslabs)\ndata(\"murders\")\n```\n:::\n\n\n1. Use the `$` operator to access the population size data and store it as the object `pop`. Then use the `sort` function to redefine `pop` so that it is sorted. Finally, use the `[` operator to report the smallest population size.\n\n2. Now instead of the smallest population size, find the index of the entry with the smallest population size. Hint: use `order` instead of `sort`.\n\n3. We can actually perform the same operation as in the previous exercise using the function `which.min`. Write one line of code that does this.\n\n4. Now we know how small the smallest state is and we know which row represents it. Which state is it? Define a variable `states` to be the state names from the `murders` data frame. Report the name of the state with the smallest population.\n\n5. You can create a data frame using the `data.frame` function. Here is a quick example:\n  \n  \n\n::: {.cell}\n\n```{.r .cell-code}\ntemp <- c(35, 88, 42, 84, 81, 30)\ncity <- c(\"Beijing\", \"Lagos\", \"Paris\", \"Rio de Janeiro\",\n          \"San Juan\", \"Toronto\")\ncity_temps <- data.frame(name = city, temperature = temp)\n```\n:::\n\n\nUse the `rank` function to determine the population rank of each state from smallest population size to biggest. Save these ranks in an object called `ranks`, then create a data frame with the state name and its rank. Call the data frame `my_df`.\n\n6. Repeat the previous exercise, but this time order `my_df` so that the states are ordered from least populous to most populous. Hint: create an object `ind` that stores the indexes needed to order the population values. Then use the bracket operator `[` to re-order each column in the data frame.\n\n7. The `na_example` vector represents a series of counts. You can quickly examine the object using:\n  \n\n::: {.cell}\n\n```{.r .cell-code}\ndata(\"na_example\")\nstr(na_example)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n int [1:1000] 2 1 3 2 1 3 1 4 3 2 ...\n```\n:::\n:::\n\n\nHowever, when we compute the average with the function `mean`, we obtain an `NA`:\n  \n\n::: {.cell}\n\n```{.r .cell-code}\nmean(na_example)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n:::\n\n\nThe `is.na` function returns a logical vector that tells us which entries are `NA`. Assign this logical vector to an object called `ind` and determine how many `NA`s does `na_example` have.\n\n\n8. Now compute the average again, but only for the entries that are not `NA`. Hint: remember the `!` operator.\n\n:::\n  \n  \n## Vector arithmetics\n  \nCalifornia had the most murders, but does this mean it is the most dangerous state? What if it just has many more people than any other state? We can quickly confirm that California indeed has the largest population:\n  \n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dslabs)\ndata(\"murders\")\nmurders$state[which.max(murders$population)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"California\"\n```\n:::\n:::\n\n\nwith over 37 million inhabitants. It is therefore unfair to compare the totals if we are interested in learning how safe the state is. What we really should be computing is the murders per capita. The reports we describe in the motivating section used murders per 100,000 as the unit. To compute this quantity, the powerful vector arithmetic capabilities of `R` come in handy.\n\n### Rescaling a vector\n\nIn R, arithmetic operations on vectors occur _element-wise_. For a quick example, suppose we have height in inches:\n  \n\n::: {.cell}\n\n```{.r .cell-code}\ninches <- c(69, 62, 66, 70, 70, 73, 67, 73, 67, 70)\n```\n:::\n\nand want to convert to centimeters. Notice what happens when we multiply `inches` by 2.54:\n  \n\n::: {.cell}\n\n```{.r .cell-code}\ninches * 2.54\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 175.26 157.48 167.64 177.80 177.80 185.42 170.18 185.42 170.18 177.80\n```\n:::\n:::\n\n\nIn the line above, we multiplied each element by 2.54.  Similarly, if for each entry we want to compute how many inches taller or shorter than 69 inches, the average height for males, we can subtract it from every entry like this:\n  \n\n::: {.cell}\n\n```{.r .cell-code}\ninches - 69\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  0 -7 -3  1  1  4 -2  4 -2  1\n```\n:::\n:::\n\n\n\n### Two vectors\n\nIf we have two vectors of the same length, and we sum them in R, they will be added entry by entry as follows:\n  \n$$\n  \\begin{pmatrix}\na\\\\\nb\\\\\nc\\\\\nd\n\\end{pmatrix}\n+\n  \\begin{pmatrix}\ne\\\\\nf\\\\\ng\\\\\nh\n\\end{pmatrix}\n=\n  \\begin{pmatrix}\na +e\\\\\nb + f\\\\\nc + g\\\\\nd + h\n\\end{pmatrix}\n$$\n  \nThe same holds for other mathematical operations, such as `-`, `*` and `/`.\n\nThis implies that to compute the murder rates we can simply type:\n  \n\n::: {.cell}\n\n```{.r .cell-code}\nmurder_rate <- murders$total / murders$population * 100000\n```\n:::\n\n\nOnce we do this, we notice that California is no longer near the top of the list. In fact, we can use what we have learned to order the states by murder rate:\n  \n\n::: {.cell}\n\n```{.r .cell-code}\nmurders$abb[order(murder_rate)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"VT\" \"NH\" \"HI\" \"ND\" \"IA\" \"ID\" \"UT\" \"ME\" \"WY\" \"OR\" \"SD\" \"MN\" \"MT\" \"CO\" \"WA\"\n[16] \"WV\" \"RI\" \"WI\" \"NE\" \"MA\" \"IN\" \"KS\" \"NY\" \"KY\" \"AK\" \"OH\" \"CT\" \"NJ\" \"AL\" \"IL\"\n[31] \"OK\" \"NC\" \"NV\" \"VA\" \"AR\" \"TX\" \"NM\" \"CA\" \"FL\" \"TN\" \"PA\" \"AZ\" \"GA\" \"MS\" \"MI\"\n[46] \"DE\" \"SC\" \"MD\" \"MO\" \"LA\" \"DC\"\n```\n:::\n:::\n\n\n\n:::fyi\n\n**TRY IT**\n  \n1. Previously we created this data frame:\n  \n\n::: {.cell}\n\n```{.r .cell-code}\ntemp <- c(35, 88, 42, 84, 81, 30)\ncity <- c(\"Beijing\", \"Lagos\", \"Paris\", \"Rio de Janeiro\",\n          \"San Juan\", \"Toronto\")\ncity_temps <- data.frame(name = city, temperature = temp)\n```\n:::\n\n\nRemake the data frame using the code above, but add a line that converts the temperature from Fahrenheit to Celsius. The conversion is $C = \\frac{5}{9} \\times (F - 32)$.\n\n2. Write code to compute the following sum $1+1/2^2 + 1/3^2 + \\dots 1/100^2$? *Hint:* thanks to Euler, we know it should be close to $\\pi^2/6$.\n\n3. Compute the per 100,000 murder rate for each state and store it in the object `murder_rate`. Then compute the average murder rate for the US using the function `mean`. What is the average?\n:::\n  \n  \n## Indexing\n  \nIndexing is a boring name for an important tool. `R` provides a powerful and convenient way of referencing specific elements of vectors. We can, for example, subset a vector based on properties of another vector. In this section, we continue working with our US murders example, which we can load like this:\n  \n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dslabs)\ndata(\"murders\")\n```\n:::\n\n\n### Subsetting with logicals\n\nWe have now calculated the murder rate using:\n  \n\n::: {.cell}\n\n```{.r .cell-code}\nmurder_rate <- murders$total / murders$population * 100000\n```\n:::\n\n\nImagine you are moving from Italy where, according to an ABC news report, the murder rate is only 0.71 per 100,000. You would prefer to move to a state with a similar murder rate. Another powerful feature of `R` is that we can use logicals to index vectors. If we compare a vector to a single number, it actually performs the test for each entry. The following is an example related to the question above:\n  \n\n::: {.cell}\n\n```{.r .cell-code}\nind <- murder_rate < 0.71\n```\n:::\n\n\nIf we instead want to know if a value is less or equal, we can use:\n  \n\n::: {.cell}\n\n```{.r .cell-code}\nind <- murder_rate <= 0.71\n```\n:::\n\n\nNote that we get back a logical vector with `TRUE` for each entry smaller than or equal to 0.71. To see which states these are, we can leverage the fact that vectors can be indexed with logicals.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmurders$state[ind]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Hawaii\"        \"Iowa\"          \"New Hampshire\" \"North Dakota\" \n[5] \"Vermont\"      \n```\n:::\n:::\n\n\nIn order to count how many are TRUE, the function `sum` returns the sum of the entries of a vector and logical vectors get _coerced_ to numeric with `TRUE` coded as 1 and `FALSE` as 0. Thus we can count the states using:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(ind)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n:::\n\n\n### Logical operators\n\nSuppose we like the mountains and we want to move to a safe state in the western region of the country. We want the murder rate to be at most 1. In this case, we want two different things to be true. Here we can use the logical operator _and_, which in `R` is represented with `&`. This operation results in `TRUE` only when both logicals are `TRUE`. To see this, consider this example:\n  \n\n::: {.cell}\n\n```{.r .cell-code}\nTRUE & TRUE\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nTRUE & FALSE\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nFALSE & FALSE\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n\nFor our example, we can form two logicals:\n  \n\n::: {.cell}\n\n```{.r .cell-code}\nwest <- murders$region == \"West\"\nsafe <- murder_rate <= 1\n```\n:::\n\n\nand we can use the `&`  to get a vector of logicals that tells us which states satisfy both conditions:\n  \n\n::: {.cell}\n\n```{.r .cell-code}\nind <- safe & west\nmurders$state[ind]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Hawaii\"  \"Idaho\"   \"Oregon\"  \"Utah\"    \"Wyoming\"\n```\n:::\n:::\n\n\n### `which`\n\nSuppose we want to look up California's murder rate. For this type of operation, it is convenient to convert vectors of logicals into indexes instead of keeping long vectors of logicals. The function `which` tells us which entries of a logical vector are TRUE. So we can type:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nind <- which(murders$state == \"California\")\nmurder_rate[ind]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3.374138\n```\n:::\n:::\n\n\n\n### `%in%`\n\n\nIf rather than an index we want a logical that tells us whether or not each element of a first vector is in a second, we can use the function `%in%`. Let's imagine you are not sure if Boston, Dakota, and Washington are states. You can find out like this:\n  \n\n::: {.cell}\n\n```{.r .cell-code}\nc(\"Boston\", \"Dakota\", \"Washington\") %in% murders$state\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE FALSE  TRUE\n```\n:::\n:::\n\n\nNote that we will be using `%in%` often throughout the course\n\n\n:::fyi\n\n**TRY IT**\n  \nStart by loading the library and data.\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dslabs)\ndata(murders)\n```\n:::\n\n\n1. Compute the per 100,000 murder rate for each state and store it in an object called `murder_rate`. Then use logical operators to create a logical vector named `low` that tells us which entries of `murder_rate` are lower than 1.\n\n2. Now use the results from the previous exercise and the function `which` to determine the indices of `murder_rate` associated with values lower than 1.\n\n3. Use the results from the previous exercise to report the names of the states with murder rates lower than 1.\n\n4. Now extend the code from exercises 2 and 3 to report the states in the Northeast with murder rates lower than 1. Hint: use the previously defined logical vector `low` and the logical operator `&`.\n\n5. In a previous exercise we computed the murder rate for each state and the average of these numbers. How many states are below the average?\n  \n6. Use the match function to identify the states with abbreviations AK, MI, and IA. Hint: start by defining an index of the entries of `murders$abb` that match the three abbreviations, then use the `[` operator to extract the states.\n\n7. Use the `%in%` operator to create a logical vector that answers the question: which of the following are actual abbreviations: MA, ME, MI, MO, MU?\n  \n8. Extend the code you used in exercise 7 to report the one entry that is **not** an actual abbreviation. Hint: use the `!` operator, which turns `FALSE` into `TRUE` and vice versa, then `which` to obtain an index.\n\n:::\n  \n  \n## Further help with `R`\n  If you are not comfortable with `R`, the earlier you seek out help, the better. Quietly letting the course pass by you because you don't know how to fix an error will do nobody any good. Attend TA office hours or attend TA or Prof. K's office hours [see Syllabus](/syllabus/) for times and Zoom links. Also, join the course Slack (see the front page of our course website for a link) and post questions there.\n\nFinally, there are also primers on [Rstudio.cloud](https://rstudio.cloud/learn/primers) that can be useful. There are many ways we can help you get used to `R`, but only if you reach out.\n\n",
    "supporting": [
      "01b_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/kePrint-0.0.1/kePrint.js\"></script>\r\n<link href=\"../../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}