---
title: "Model Selection in Linear Regression"
output:
  blogdown::html_page:
    toc: true
editor_options:
  chunk_output_type: console
---



##  Model Selection

Often when we are developing a linear regression model, part of our goal is to **explain** a relationship. Now, we will ignore much of what we have learned and instead simply use regression as a tool to **predict**. Instead of a model which explains relationships, we seek a model which minimizes errors.

```{r, echo=F}
library(here)
knitr::include_graphics(here('images','regression.png'))
```


First, note that a linear model is one of many methods used in regression.

```{r, message = FALSE, warning = FALSE, echo = FALSE}
library(readr)
library(ggplot2)
library(tidyverse)

```

To discuss linear models in the context of prediction, we introduce the (very boring) `Advertising` data that is discussed in the ISL text (see supplemental readings). It can be found at [https://www.statlearning.com/s/Advertising.csv](https://www.statlearning.com/s/Advertising.csv).

```{r}
Advertising <- read_csv('https://www.statlearning.com/s/Advertising.csv')
Advertising = Advertising %>% 
  dplyr::select(TV, radio, newspaper, sales)
Advertising
```

We can take a look at the relationship between `sales` and the three modes of advertising using the `patchwork` package (or any number of other ways)

```{r, fig.height = 4, fig.width = 10, message = FALSE, warning = FALSE}
library(patchwork)
tv = ggplot(Advertising, aes(x = TV, y = sales)) + geom_point() + theme_bw()
rad = ggplot(Advertising, aes(x = radio, y = sales)) + geom_point() + theme_bw()
news = ggplot(Advertising, aes(x = newspaper, y = sales)) + geom_point() + theme_bw()
tv + rad + news
```

Here we see a relationship between each of the advertising modes and sales, but we might want to know more. Specifically, we probably want to know something about the sales-maximizing combination of the three modes. For that, we'd need a good model of sales. But what does "good" mean?


## Assesing Model Accuracy

There are many metrics to assess the accuracy of a regression model. Most of these measure in some way the average error that the model makes. The metric that we will be most interested in is the root-mean-square error.

$$
\text{RMSE}(\hat{f}, \text{Data}) = \sqrt{\frac{1}{n}\displaystyle\sum_{i = 1}^{n}\left(y_i - \hat{f}(\bf{x}_i)\right)^2}
$$

While for the sake of comparing models, the choice between RMSE and MSE is arbitrary, we have a preference for RMSE, as it has the same units as the response variable. Also, notice that in the prediction context MSE refers to an average, whereas in an ANOVA (`summary(lm(...))`) context, the denominator for MSE may not be $n$.

For a linear model , the estimate of $f$, $\hat{f}$, is given by the fitted regression line.

$$
\hat{y}({\bf{x}_i}) = \hat{f}({\bf{x}_i})
$$

We can write an `R` function that will be useful for performing this calculation.

```{r}
rmse = function(actual, predicted) {
  sqrt(mean((actual - predicted) ^ 2))
}
```


## Model Complexity

Aside from how well a model predicts, we will also be very interested in the complexity (flexibility) of a model. For now, we will only consider nested linear models for simplicity. What is a "nested model"? When you have "nested models", then one model contains all of the *same* terms that the other model has. If we have `TV`, `Radio`, `Newspaper`, then we would have a "nested model" in this case:

```
model1 = lm(sales ~ TV + radio, data = Advertising)
model2 = lm(sales ~ TV + radio + newspaper, data = Advertising)
```

Here, `model1` is nested in `model2`. Here are **non-nested models**:

```
model1 = lm(sales ~ TV + radio, data = Advertising)
model2 = lm(sales ~ TV + newspaper, data = Advertising)
```

When we add polynomial terms, we always add the lower-order terms as well. This will always make a nested model:

```
model1 = lm(sales ~ TV + radio, data = Advertising)
model2 = lm(sales ~ TV + TV^2 + radio + radio^2, data = Advertising)
model3 = lm(sales ~ TV + TV^2 + radio + radio^2 + TV:radio, data = Advertising)
```

Those are nested models -- 1 and 2 use a subset of terms from 3, and 1 uses a subset of 2.

When models are nested, then the more predictors that a model has, the more complex the model. For the sake of assigning a numerical value to the complexity of a linear model, we will use the number of predictors, $p$.

We write a simple `R` function to extract this information from a model.

```{r}
get_complexity = function(model) {
  length(coef(model)) - 1
}
```


## Test-Train Split

There is an issue with fitting a model to all available data then using RMSE to determine how well the model predicts. It is essentially cheating! As a linear model becomes more complex, the RSS, thus RMSE, can never go up. It will only go down, or in very specific cases, stay the same.

This would suggest that to predict well, we should use the largest possible model! However, in reality we have hard fit to a specific dataset, but as soon as we see new data, a large model may in fact predict poorly. This is called **overfitting**.

### Overfitting in action
Let's take a quick look at why overfitting may harm us, despite the notion that we want to minimize RMSE. I'm going to take a 20-row subset of `Advertising` and fit a 16th-degree polynomial. If you remember your mathematics training, an Nth degree polynomial has N-1 "inflection points", which translates to fitting a curve with 15 inflections. That's pretty flexible! R is smart and won't let us fit a 20-degree polynomial, though. Here's as close as we can get:

```{r}
smallset = Advertising %>% slice(1:20)
flexible.lm = lm(sales ~ poly(TV, 16), smallset)
summary(flexible.lm)

```

Looks great - we are explaining a **lot** of the variation in sales! Let's plot this 16-degree polynomial:

```{r}
# Plot a curve using predict over a very fine set of values
plotseq = seq(from = min(smallset$TV), to = max(smallset$TV), length = 300)
predseq = predict(flexible.lm, newdata = data.frame(TV = plotseq))

plot(sales ~ TV, smallset, ylim = c(0, 100))
lines(y = predseq, x = plotseq)
```

and this model has complexity of:

```{r}
get_complexity(flexible.lm)
```

But we don't really believe that TV advertising of around 20 would result in almost 40 in sales. We certainly don't trust that huge spike at 250, either! But how do we stop ourselves from overfitting?

::: {.callout-note}

## TRY IT

When I was a teenager and had to drive in the snow for the first time, my mom took me out to the empty, frozen parking lot for my local roller rink. She had me drive fast, then slam on the brakes so that we skidded on the ice. The point of doing this was to get a feel for what skidding on ice is like. You can be **told** what it's like to skid, but until you do it, it's abstract. Same thing with overfitting.

Let's make overfitting concrete.

Run the following code to download and subset some data. The code does a couple other things. Can you tell what?

```{r, echo=T}
set.seed(242)

RECS = read.csv('https://www.eia.gov/consumption/residential/data/2009/csv/recs2009_public.csv', stringsAsFactors = F) %>%
  as_tibble() %>%  
  slice(sample(1:n(), 30)) %>%
  dplyr::select(EnergyUsed = TOTALBTU, 
                REGIONC, DIVISION, Climate_Region_Pub, METROMICRO, Urban=UR, OWNRENT = KOWNRENT,YEARMADERANGE, 
                Occupants = OCCUPYYRANGE,ColdDays = HDD65, HotDayss = CDD65, SquareFeet = TOTHSQFT, CarsGarage = SIZEOFGARAGE, 
                AgeOfHome = YEARMADERANGE, TreeShade = TREESHAD, TVSize = TVSIZE1, HeaterAge = EQUIPAGE, HasAC = AIRCOND,
                TempHome = TEMPHOME) %>%
  dplyr::filter(HeaterAge != -2 & TempHome !=-2)  %>% # get rid of some NA's
  dplyr::mutate(var1 = rnorm(n(), mean=0, sd = 1),
                var2 = rnorm(n(), mean=10, sd = .5),
                var3 = rpois(n(), 5),
                var4 = runif(n(), -10, 0))

```

We have a lot of potential X-values here, so have at it. Use interactions, use polynomials, use polynomials of interactions -- just make a `lm()` model that gets the RMSE down low. To use your `rmse` function, give it the prediction from your `lm()` model and the original date: `rmse(RECS$EnergyUsed, predict(MyOLS)`.

Now, my challenge to you is to estimate a linear-in-parameters model that minimizes RMSE (using your `rmse` function) for a prediction of `EnergyUsed`. Use as many variables as you want. Don't use the `poly` function like we did before, since that's too easy. Who can get the lowest RMSE? 

:::



### Avoiding overfitting

Frequently we will take a dataset of interest and split it in two. One part of the datasets will be used to fit (train) a model, which we will call the **training** data. The remainder of the original data will be used to assess how well the model is predicting, which we will call the **test** data. Test data should *never* be used to train a model.

Note that sometimes the terms *evaluation set* and *test set* are used interchangeably. We will give somewhat specific definitions to these later. For now we will simply use a single test set for a training set.

Here we use the `sample()` function to obtain a random sample of the rows of the original data. We then use those row numbers (and remaining row numbers) to split the data accordingly. Notice we used the `set.seed()` function to allow use to reproduce the same random split each time we perform this analysis.

```{r}
set.seed(90)
num_obs = nrow(Advertising)

train_index = sample(num_obs, size = trunc(0.50 * num_obs))
train_data = Advertising[train_index, ]
test_data = Advertising[-train_index, ]
```

We will look at two measures that assess how well a model is predicting, the **train RMSE** and the **test RMSE**.

$$
\text{RMSE}_{\text{Train}} = \text{RMSE}(\hat{f}, \text{Train Data}) = \sqrt{\frac{1}{n_{\text{Tr}}}\displaystyle\sum_{i \in \text{Train}}^{}\left(y_i - \hat{f}(\bf{x}_i)\right)^2}
$$

Here $n_{Tr}$ is the number of observations in the train set. Train RMSE will still always go down (or stay the same) as the complexity of a linear model increases. That means train RMSE will not be useful for comparing models, but checking that it decreases is a useful sanity check.

$$
\text{RMSE}_{\text{Test}} = \text{RMSE}(\hat{f}, \text{Test Data}) = \sqrt{\frac{1}{n_{\text{Te}}}\displaystyle\sum_{i \in \text{Test}}^{}\left(y_i - \hat{f}(\bf{x}_i)\right)^2}
$$

Here $n_{Te}$ is the number of observations in the test set. Test RMSE uses the model fit to the training data, but evaluated on the unused test data. This is a measure of how well the fitted model will predict **in general**, not simply how well it fits data used to train the model, as is the case with train RMSE. What happens to test RMSE as the size of the model increases? That is what we will investigate.

We will start with the simplest possible linear model, that is, a model with no predictors.

```{r}
fit_0 = lm(sales ~ 1, data = train_data)
get_complexity(fit_0)

# train RMSE
sqrt(mean((train_data$sales - predict(fit_0, train_data)) ^ 2))
# test RMSE
sqrt(mean((test_data$sales - predict(fit_0, test_data)) ^ 2))
```

The previous two operations obtain the train and test RMSE. Since these are operations we are about to use repeatedly, we should use the function that we happen to have already written.

```{r}
# train RMSE
rmse(actual = train_data$sales, predicted = predict(fit_0, train_data))
# test RMSE
rmse(actual = test_data$sales, predicted = predict(fit_0, test_data))
```

This function can actually be improved for the inputs that we are using. We would like to obtain train and test RMSE for a fitted model, given a train or test dataset, and the appropriate response variable.

```{r}
get_rmse = function(model, data, response) {
  rmse(actual = subset(data, select = response, drop = TRUE),
       predicted = predict(model, data))
}
```

By using this function, our code becomes easier to read, and it is more obvious what task we are accomplishing.

```{r}
get_rmse(model = fit_0, data = train_data, response = "sales") # train RMSE
get_rmse(model = fit_0, data = test_data, response = "sales") # test RMSE
```


## Adding Flexibility to Linear Models

Each successive model we fit will be more and more flexible using both interactions and polynomial terms. We will see the training error decrease each time the model is made more flexible. We expect the test error to decrease a number of times, then eventually start going up, as a result of overfitting.

```{r}
fit_1 = lm(sales ~ ., data = train_data)
get_complexity(fit_1)

get_rmse(model = fit_1, data = train_data, response = "sales") # train RMSE
get_rmse(model = fit_1, data = test_data, response = "sales") # test RMSE
```

```{r}
fit_2 = lm(sales ~ radio * newspaper * TV, data = train_data)
get_complexity(fit_2)

get_rmse(model = fit_2, data = train_data, response = "sales") # train RMSE
get_rmse(model = fit_2, data = test_data, response = "sales") # test RMSE
```

```{r}
fit_3 = lm(sales ~ radio * newspaper * TV + I(TV ^ 2), data = train_data)
get_complexity(fit_3)

get_rmse(model = fit_3, data = train_data, response = "sales") # train RMSE
get_rmse(model = fit_3, data = test_data, response = "sales") # test RMSE
```

```{r}
fit_4 = lm(sales ~ radio * newspaper * TV +
           I(TV ^ 2) + I(radio ^ 2) + I(newspaper ^ 2), data = train_data)
get_complexity(fit_4)

get_rmse(model = fit_4, data = train_data, response = "sales") # train RMSE
get_rmse(model = fit_4, data = test_data, response = "sales") # test RMSE
```

```{r}
fit_5 = lm(sales ~ radio * newspaper * TV +
           I(TV ^ 2) * I(radio ^ 2) * I(newspaper ^ 2), data = train_data)
get_complexity(fit_5)

get_rmse(model = fit_5, data = train_data, response = "sales") # train RMSE
get_rmse(model = fit_5, data = test_data, response = "sales") # test RMSE
```

## Choosing a Model

To better understand the relationship between train RMSE, test RMSE, and model complexity, we summarize our results, as the above is somewhat cluttered.

First, we recap the models that we have fit.

```{r, eval = FALSE}
fit_1 = lm(sales ~ ., data = train_data)
fit_2 = lm(sales ~ radio * newspaper * TV, data = train_data)
fit_3 = lm(sales ~ radio * newspaper * TV + I(TV ^ 2), data = train_data)
fit_4 = lm(sales ~ radio * newspaper * TV +
           I(TV ^ 2) + I(radio ^ 2) + I(newspaper ^ 2), data = train_data)
fit_5 = lm(sales ~ radio * newspaper * TV +
           I(TV ^ 2) * I(radio ^ 2) * I(newspaper ^ 2), data = train_data)
```

Next, we create a list of the models fit.

```{r}
model_list = list(fit_1, fit_2, fit_3, fit_4, fit_5)
```

We then obtain train RMSE, test RMSE, and model complexity for each.

```{r}
train_rmse = sapply(model_list, get_rmse, data = train_data, response = "sales")
test_rmse = sapply(model_list, get_rmse, data = test_data, response = "sales")
model_complexity = sapply(model_list, get_complexity)
```

```{r, echo = FALSE, eval = FALSE}
# the following is the same as the apply command above

test_rmse = c(get_rmse(fit_1, test_data, "sales"),
              get_rmse(fit_2, test_data, "sales"),
              get_rmse(fit_3, test_data, "sales"),
              get_rmse(fit_4, test_data, "sales"),
              get_rmse(fit_5, test_data, "sales"))
```

We then plot the results. The train RMSE can be seen in blue, while the test RMSE is given in orange.

```{r}
plot(model_complexity, train_rmse, type = "b",
     ylim = c(min(c(train_rmse, test_rmse)) - 0.02,
              max(c(train_rmse, test_rmse)) + 0.02),
     col = "dodgerblue",
     xlab = "Model Size",
     ylab = "RMSE")
lines(model_complexity, test_rmse, type = "b", col = "darkorange")
legend('topright', legend = c('train','test'), col = c('dodgerblue','darkorange'), lty=1)
```

We also summarize the results as a table. `fit_1` is the least flexible, and `fit_5` is the most flexible. We see the Train RMSE decrease as flexibility increases. We see that the Test RMSE is smallest for `fit_3`, thus is the model we believe will perform the best on future data not used to train the model. Note this may not be the best model, but it is the best model of the models we have seen in this example.

| Model   | Train RMSE        | Test RMSE        | Predictors              |
|---------|-------------------|------------------|-------------------------|
| `fit_1` | `r train_rmse[1]` | `r test_rmse[1]` | `r model_complexity[1]` |
| `fit_2` | `r train_rmse[2]` | `r test_rmse[2]` | `r model_complexity[2]` |
| `fit_3` | `r train_rmse[3]` | `r test_rmse[3]` | `r model_complexity[3]` |
| `fit_4` | `r train_rmse[4]` | `r test_rmse[4]` | `r model_complexity[4]` |
| `fit_5` | `r train_rmse[5]` | `r test_rmse[5]` | `r model_complexity[5]` |

To summarize:

- **Underfitting models:** In general *High* Train RMSE, *High* Test RMSE. Seen in `fit_1` and `fit_2`.
- **Overfitting models:** In general *Low* Train RMSE, *High* Test RMSE. Seen in `fit_4` and `fit_5`.

Specifically, we say that a model is overfitting if there exists a less complex model with lower Test RMSE. Then a model is underfitting if there exists a more complex model with lower Test RMSE.

A number of notes on these results:

- The labels of under and overfitting are *relative* to the best model we see, `fit_3`. Any model more complex with higher Test RMSE is overfitting. Any model less complex with higher Test RMSE is underfitting.
- The train RMSE is guaranteed to follow this non-increasing pattern. The same is not true of test RMSE. Here we see a nice U-shaped curve. There are theoretical reasons why we should expect this, but that is on average. Because of the randomness of one test-train split, we may not always see this result. Re-perform this analysis with a different seed value and the pattern may not hold. We will discuss why we expect this next chapter. We will discuss how we can help create this U-shape much later.
- Often we expect train RMSE to be lower than test RMSE. Again, due to the randomness of the split, you may get lucky and this will not be true.

A final note on the analysis performed here; we paid no attention whatsoever to the "assumptions" of a linear model. We only sought a model that **predicted** well, and paid no attention to a model for **explaination**. Hypothesis testing did not play a role in deciding the model, only prediction accuracy. Collinearity? We don't care. Assumptions? Still don't care. Diagnostics? Never heard of them. (These statements are a little over the top, and not completely true, but just to drive home the point that we only care about prediction. Often we latch onto methods that we have seen before, even when they are not needed.)




## Coding for Test-Train Split

### Making the split:
Above, when [we created the split datasets](#avoiding-overfitting), you'll notice we used a sampled index to make our training and testing split. Let's take a closer look using a "dataset" of 10:

```{r}
dataset = data.frame(index = 1:10)

train_index = sample(NROW(dataset), size = trunc(.50*NROW(dataset)))
print(train_index)
```


In the first line, we create a 10-row (and 1-column and very boring) dataset to use to illustrate the train/test index.

In the second line, we make a sample by drawing row *numbers*. The first argument to `sample` is "what do you want to draw from" and if we give it a single number, it assumes we meant 1 through that number. So giving it `NROW(dataset)` samples from the numbers 1:10, because we have 10 rows. The second argument is "how many should we draw", and here, we ask for 50%. Since sometimes 50% will be fraction (if an odd number of rows), we use `trunc` to round it down. If we had 11 rows, this would give us a training sample of 5. Note that we don't use replacement here -- we don't want to draw the same row index twice!

Now we create the split data:

```{r}
train_dataset = dataset[train_index,]
test_dataset = dataset[-train_index,]

```

We want to make sure that all data is either in the training or the testing data, not both, and not left out. The first line should be intuitive -- it keeps the row numbers corresponding to those drawn in `train_index`.

The second line, though, **looks** like it's keeping the...negative rows? Huh? Let's take a look:

```{r}
print(train_index)

print(-train_index)
```

So what does it mean to ask R to give you the `r -train_index[1]` row of `dataset`? R knows you can't have negative rows, so the original authors thought it handy to use negatives to mean "omit". So `(1:5)[-2]` would give you the numbers 1 to 5, but without the 2nd entry (gotta use the () or you'll be asking for something different). `r (1:5)[-2]`

So when we look at the `test_dataset` we see:

```{r}
dataset[-train_index,,drop=F]
# 'drop=F' keeps it from making the single column into a vector
```

And that is the numbers 1:10, but without `train_index`: `r train_index`

Now we know that every row is either in train or test. Super!

### `lapply` for model building 
While `R` has some great functionality for building and estimating multiple models, we're going to learn how to do it at the most base level so that we can build from there. The best way is to use `lapply` since we're fundamentally going to be using the same *functions* on different *models*. If we make a list of models, we can `lapply` our way to finding the best out-of-sample (test) fit!

So we start with a list of models. There are many ways to do this (see previous lecture), but here I'm going to write them out manually in a way that you should be able to do faster with code:

```{r}
# Create some random data:
set.seed(242)
N = 1000
dat = data.frame(Y = rnorm(N),
                 X1 = rnorm(N),
                 X2 = rnorm(N),
                 X3 = rpois(N, 5))
train_index = sample(N, trunc(.5*N))

dat.train = dat[train_index,]
dat.test = dat[-train_index,]

model_c = c(
 "Y ~ 1", # just intercept
 "Y ~ X1",
 "Y ~ X1*X2",
 "Y ~ X1*X2*X3",
 "Y ~ X1*X2*X3*I(X1^2)",
 "Y ~ X1*X2*X3*I(X1^2)*I(X2^2)",
 "Y ~ X1*X2*X3*I(X1^2)*I(X2^2)*I(X3^2)",
 "Y ~ poly(X1, 3)*poly(X2,3)*poly(X3,3)", 
 "Y ~ poly(X1, 4)*poly(X2,4)*poly(X3,4)"
)

model_list = as.list(model_c)

model_list_form = lapply(X = model_list, FUN = as.formula)

print(model_list_form)

```

First we make some fake data to illustrate. Then, we get to the real business -- this is the structure we'll follow: we make a vector of model specifications, then we make it a list using `as.list`. Then, we use `lapply` (list-apply) to hit every entry with `as.formula`. Remember, for `lapply`, it takes each list element and uses it as the first argument in the given `FUN`, so it'll run `as.formula(model_list[[1]])` and then, in the output's first list entry, place the result.

Now, we `lapply` that model, returning the fit object (which we can use to `predict` results using new data). This requires an "anonymous function". The anonymous function lets you, on the fly, write a function with one argument that lets you reference the list element being applied:

```{r}
model_ests = lapply(model_list_form, function(x) lm(x, data = dat.train ))
```

Alright, no errors. Looks like we estimated seven models. You wouldn't usually do this, but let's look at the first 2 and the last one

```{r}
print(lapply(model_ests[c(1:2, 9)], function(x) summary(x)))
```

::: {.callout-warning}
## WARNING

Don't print out the coefficient tables of your results for any of your models. We only want to predict, we don't want to interpret.

:::


Now, calculate the rmse for train and test:

```{r}
model_rmse_train = lapply(model_ests, function(x) get_rmse(model = x, data = dat.train, response = 'Y'))
print(model_rmse_train)
```

```{r}
model_rmse_test = lapply(model_ests, function(x) get_rmse(model = x, data = dat.test, response = 'Y'))
print(model_rmse_test)
```

Then, we can make the data.frame of results. We'd usually have `complexity` in there too, but I'll put the formulas in. In later work, we won't really have "formulas" to put in here.

```{r}
data.frame(formula = as.character(unlist(model_list_form)), # usually you'd have complexity here
           train_rmse = unlist(model_rmse_train),
           test_rmse = unlist(model_rmse_test))
```

::: {.callout-tip}
## What's our takeaway from this?

1. Which model does best?

2. Does this seem like an odd outcome? What did the data look like in the first place?

:::
