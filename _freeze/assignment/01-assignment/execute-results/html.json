{
  "hash": "fb39dbf203cd8320939dd2f9dd2bc5f2",
  "result": {
    "markdown": "---\ntitle: \"1: Programming Basics in R\"\nlinktitle: \"1: Programming Basics in R\"\nduedate: \"{{< var duedates.lab1 >}}\" # change in the main _variables.yml file and it will cascade here and below\n---\n\n\n::: {.callout-warning}\n## Due Date\nThis assignment is due on **{{< meta duedate >}}**\n:::\n\n\n{{< var blurbs.homeworkdue >}}\n\n\n\n \n::: {.callout-tip}\n## Note:\n\nAs you read through this assignment, practice with each of the examples (copy-paste them into an empty R script and run them). At the bottom of this page you will find the questions that comprise the assignment. These questions apply and expand on the topics and R functions in the assignment.\n\nDownload the {{< var blurbs.labtemplate >}}. Please save the template into a labs folder in the EC242 folder on your local hard drive. If you don't have a nice file structure setup for the course, please do so now. *It will save you headaches in the future*.\n:::\n\n\n\nIf you have not yet done so, you'll need to install both R and RStudio. See the [Installing page of our course resources](/resource/install/) for instructions.\n\nI have created a video walkthrough for the basics of using R for another course, but it is useful here. You can [see part A here (labeled \"Part 2a\") here <i class=\"fas fa-film\"></i>](https://mediaspace.msu.edu/media/R+Part+2a/1_kmszjw36)] and [part B here (labeled \"Part 2b\")  <i class=\"fas fa-film\"></i>](https://mediaspace.msu.edu/media/R+Part+2b/1_c0vf0i63). You should already be at this level of familiarity with R, but if you need a review, this is a good place to start.\n\n\n\n# Programming basics\n\nWe teach `R` because it greatly facilitates data analysis, the main topic of this book. By coding in R, we can efficiently perform exploratory data analysis, build data analysis pipelines, and prepare data visualization to communicate results. However, `R` is not just a data analysis environment but a programming language. Advanced `R` programmers can develop complex packages and even improve `R` itself, but we do not cover advanced programming in this book. Nonetheless, in this section, we introduce three key programming concepts: conditional expressions, for-loops, and functions. These are not just key building blocks for advanced programming, but are sometimes useful during data analysis. We also note that there are several functions that are widely used to program in `R` but that we will not cover in this book. These include `split`, `cut`, `do.call`, and `Reduce`, as well as the __data.table__ package. These are worth learning if you plan to become an expert `R` programmer.\n\n## Conditional expressions {#conditionals}\n\nConditional expressions are one of the basic features of programming. They are used for what is called _flow control_. The most common conditional expression is the if-else statement. In R, we can actually perform quite a bit of data analysis without conditionals. However, they do come up occasionally, and you will need them once you start writing your own functions and packages.\n\nHere is a very simple example showing the general structure of an if-else statement. The basic idea is to print the reciprocal of `a` unless `a` is 0:\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- 0\n\nif(a!=0){\n  print(1/a)\n} else{\n  print(\"No reciprocal for 0.\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"No reciprocal for 0.\"\n```\n:::\n:::\n\n\n\nLet's look at one more example using the US murders data frame:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dslabs)\ndata(murders)\nmurder_rate <- murders$total / murders$population*100000\n```\n:::\n\n\n\nHere is a very simple example that tells us which states, if any, have a murder rate lower than 0.5 per 100,000. The `if` statement protects us from the case in which no state satisfies the condition.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nind <- which.min(murder_rate)\n\nif(murder_rate[ind] < 0.5){\n  print(murders$state[ind])\n} else{\n  print(\"No state has murder rate that low\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Vermont\"\n```\n:::\n:::\n\n\nIf we try it again with a rate of 0.25, we get a different answer:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif(murder_rate[ind] < 0.25){\n  print(murders$state[ind])\n} else{\n  print(\"No state has a murder rate that low.\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"No state has a murder rate that low.\"\n```\n:::\n:::\n\n\n\nA related function that is very useful is `ifelse`. This function takes three arguments: a logical and two possible answers. If the logical is `TRUE`, the value in the second argument is returned and if `FALSE`, the value in the third argument is returned. Here is an example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- 0\nifelse(a > 0, 1/a, NA)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n:::\n\n\nThe function is particularly useful because it works on vectors. It examines each entry of the logical vector and returns elements from the vector provided in the second argument, if the entry is `TRUE`, or elements from the vector provided in the third argument, if the entry is `FALSE`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- c(0, 1, 2, -4, 5)\nresult <- ifelse(a > 0, 1/a, NA)\n```\n:::\n\n\nThis table helps us see what happened:\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table>\n <thead>\n  <tr>\n   <th style=\"text-align:right;\"> a </th>\n   <th style=\"text-align:left;\"> is_a_positive </th>\n   <th style=\"text-align:right;\"> answer1 </th>\n   <th style=\"text-align:left;\"> answer2 </th>\n   <th style=\"text-align:right;\"> result </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:left;\"> FALSE </td>\n   <td style=\"text-align:right;\"> Inf </td>\n   <td style=\"text-align:left;\"> NA </td>\n   <td style=\"text-align:right;\"> NA </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:left;\"> TRUE </td>\n   <td style=\"text-align:right;\"> 1.00 </td>\n   <td style=\"text-align:left;\"> NA </td>\n   <td style=\"text-align:right;\"> 1.0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 2 </td>\n   <td style=\"text-align:left;\"> TRUE </td>\n   <td style=\"text-align:right;\"> 0.50 </td>\n   <td style=\"text-align:left;\"> NA </td>\n   <td style=\"text-align:right;\"> 0.5 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> -4 </td>\n   <td style=\"text-align:left;\"> FALSE </td>\n   <td style=\"text-align:right;\"> -0.25 </td>\n   <td style=\"text-align:left;\"> NA </td>\n   <td style=\"text-align:right;\"> NA </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 5 </td>\n   <td style=\"text-align:left;\"> TRUE </td>\n   <td style=\"text-align:right;\"> 0.20 </td>\n   <td style=\"text-align:left;\"> NA </td>\n   <td style=\"text-align:right;\"> 0.2 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\nHere is an example of how this function can be readily used to replace all the missing values in a vector with zeros:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(na_example)\nno_nas <- ifelse(is.na(na_example), 0, na_example)\nsum(is.na(no_nas))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n:::\n\n\nTwo other useful functions are `any` and `all`. The `any` function takes a vector of logicals and returns `TRUE` if any of the entries is `TRUE`. The `all` function takes a vector of logicals and returns `TRUE` if all of the entries are `TRUE`. Here is an example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nz <- c(TRUE, TRUE, FALSE)\nany(z)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nall(z)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n\n## Defining functions\n\nAs you become more experienced, you will find yourself needing to perform the same operations over and over. A simple example is computing averages. We can compute the average of a vector `x` using the `sum` and `length` functions: `sum(x)/length(x)`. Because we do this repeatedly, it is much more efficient to write a function that performs this operation. This particular operation is so common that someone already wrote the `mean` function and it is included in base R. However, you will encounter situations in which the function does not already exist, so `R` permits you to write your own. A simple version of a function that computes the average can be defined like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\navg <- function(x){\n  s <- sum(x)\n  n <- length(x)\n  s/n\n}\n```\n:::\n\n\nNow `avg` is a function that computes the mean:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 1:100\nidentical(mean(x), avg(x))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\nNotice that variables defined inside a function are not saved in the workspace. So while we use `s` and `n` when we call `avg`, the values are created and changed only during the call. Here is an illustrative example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ns <- 3\navg(1:10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5.5\n```\n:::\n\n```{.r .cell-code}\ns\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n:::\n\n\nNote how `s` is still 3 after we call `avg`.\n\n\nIn general, functions are objects, so we assign them to variable names with `<-`. The function `function` tells `R` you are about to define a function. The general form of a function definition looks like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_function <- function(VARIABLE_NAME){\n  perform operations on VARIABLE_NAME and calculate VALUE\n  VALUE\n}\n```\n:::\n\n\nThe functions you define can have multiple arguments as well as default values. For example, we can define a function that computes either the arithmetic or geometric average depending on a user defined variable like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\navg <- function(x, arithmetic = TRUE){\n  n <- length(x)\n  ifelse(arithmetic, sum(x)/n, prod(x)^(1/n))\n}\n```\n:::\n\n\nWe will learn more about how to create functions through experience as we face more complex tasks.\n\n## Namespaces\n\nOnce you start becoming more of an `R` expert user, you will likely need to load several add-on packages for some of your analysis. Once you start doing this, it is likely that two packages use the same name for two different functions. And often these functions do completely different things. In fact, you have already encountered this because both __dplyr__ and the R-base  __stats__ package define a `filter` function.  There are five other examples in __dplyr__. We know this because when we first load __dplyr__ we see the following message:\n\n```\nThe following objects are masked from ‘package:stats’:\n\n    filter, lag\n\nThe following objects are masked from ‘package:base’:\n\n    intersect, setdiff, setequal, union\n```\n\nSo what does `R` do when we type `filter`? Does it use the __dplyr__ function or the __stats__ function? From our previous work we know it uses the __dplyr__ one. But what if we want to use the __stats__ version?\n\nThese functions live in different _namespaces_. `R` will follow a certain order when searching for a function in these _namespaces_. You can see the order by typing:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsearch()\n```\n:::\n\n\nThe first entry in this list is the global environment which includes all the objects you define.\n\nSo what if we want to use the __stats__ `filter` instead of the __dplyr__ filter but __dplyr__ appears first in the search list? You can force the use of a specific namespace by using double colons (`::`) like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstats::filter\n```\n:::\n\n\nIf we want to be absolutely sure that we use the __dplyr__ `filter`, we can use\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndplyr::filter\n```\n:::\n\n\nAlso note that if we want to use a function in a package without loading the entire package, we can use the double colon as well.\n\nFor more on this more advanced topic we recommend the `R` packages book^[http://r-pkgs.had.co.nz/namespace.html].\n\n## For-loops\n\nIf we had to write this section in a single sentence, it would be: Don't use for-loops. Looping is intuitive, but `R` is designed to provide more computationally efficient solutions. For-loops should be considered a quick-and-dirty way to get an answer. But, hey, you live your own life. Below we provide a brief overview to for-looping.\n\nThe formula for the sum of the series $1+2+\\dots+n$ is $n(n+1)/2$. What if we weren't sure that was the right function? How could we check? Using what we learned about functions we can create one that computes the $S_n$:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncompute_s_n <- function(n){\n  x <- 1:n\n  sum(x)\n}\n```\n:::\n\n\nHow can we compute $S_n$ for various values of $n$, say $n=1,\\dots,25$? Do we write 25 lines of code calling `compute_s_n`? No, that is what for-loops are for in programming. In this case, we are performing exactly the same task over and over, and the only thing that is changing is the value of $n$. For-loops let us define the range that our variable takes (in our example $n=1,\\dots,10$), then change the value and evaluate expression as you _loop_.\n\nPerhaps the simplest example of a for-loop is this useless piece of code:\n\n::: {.cell}\n\n```{.r .cell-code}\nfor(i in 1:5){\n  print(i)\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n```\n:::\n:::\n\n\nHere is the for-loop we would write for our $S_n$ example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm <- 25\ns_n <- vector(length = m) # create an empty vector\nfor(n in 1:m){\n  s_n[n] <- compute_s_n(n)\n}\n```\n:::\n\nIn each iteration $n=1$, $n=2$, etc..., we compute $S_n$ and store it in the $n$th entry of `s_n`.\n\nNow we can create a plot to search for a pattern:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 1:m\nplot(n, s_n)\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](01-assignment_files/figure-html/sum-of-consecutive-squares-1.png){width=50%}\n:::\n:::\n\n\n\nIf you noticed that it appears to be a quadratic, you are on the right track because the formula is $n(n+1)/2$.\n<!--\nwhich we can confirm with a table:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(data.frame(s_n = s_n, formula = n*(n+1)/2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  s_n formula\n1   1       1\n2   3       3\n3   6       6\n4  10      10\n5  15      15\n6  21      21\n```\n:::\n:::\n\n\nWe can also overlay the two results by using the function `lines` to draw a line over the previously plotted points:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(n, s_n)\nlines(n, n*(n+1)/2)\n```\n\n::: {.cell-output-display}\n![](01-assignment_files/figure-html/s_n-v-n-1.png){width=672}\n:::\n:::\n\n\n-->\n\n## Vectorization and functionals {#vectorization}\n\nAlthough for-loops are an important concept to understand, in `R` we rarely use them. As you learn more `R`, you will realize that _vectorization_ is preferred over for-loops since it results in shorter and clearer code. (It's also vastly more efficient computationally, which can matter as your data grows.) A _vectorized_ function is a function that will apply the same operation on each of the vectors.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 1:10\nsqrt(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 1.000000 1.414214 1.732051 2.000000 2.236068 2.449490 2.645751 2.828427\n [9] 3.000000 3.162278\n```\n:::\n\n```{.r .cell-code}\ny <- 1:10\nx*y\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]   1   4   9  16  25  36  49  64  81 100\n```\n:::\n:::\n\n\nTo make this calculation, there is no need for for-loops. However, not all functions work this way. For instance, the function we just wrote, `compute_s_n`, does not work element-wise since it is expecting a scalar. This piece of code does not run the function on each entry of `n`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 1:25\ncompute_s_n(n)\n```\n:::\n\n\n_Functionals_ are functions that help us apply the same function to each entry in a vector, matrix, data frame, or list. Here we cover the functional that operates on numeric, logical, and character vectors: `sapply`.\n\nThe function `sapply` permits us to perform element-wise operations on any function. Here is how it works:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 1:10\nsapply(x, sqrt)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 1.000000 1.414214 1.732051 2.000000 2.236068 2.449490 2.645751 2.828427\n [9] 3.000000 3.162278\n```\n:::\n:::\n\n\nEach element of `x` is passed on to the function `sqrt` and the result is returned. These results are concatenated. In this case, the result is a vector of the same length as the original `x`. This implies that the for-loop above can be written as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 1:25\ns_n <- sapply(n, compute_s_n)\n```\n:::\n\n\nOther functionals are `apply`, `lapply`, `tapply`, `mapply`, `vapply`, and `replicate`. We mostly use `sapply`, `apply`, and `replicate` in this book, but we recommend familiarizing yourselves with the others as they can be very useful.\n\n## Exercises\n\nThis is your first weekly lab assignment. Each lab assignment will need to be done in Rmarkdown using [the lab template](https://raw.githubusercontent.com/ajkirkpatrick/FS20/Spring2021/Rmarkdown_templates/SSC442_Lab_Assignment_Template.Rmd), just right-click and Save As...**Start a new folder on your drive for this course, and inside that a new folder for lab assignments, and inside that a new folder for Lab No. 0**. Rmarkdown will place some intermediate files in that folder, so leaving .Rmd files on your desktop will make things messy, fast.\n\nOnce you've saved the file, open it up in Rstudio.\n\n- Change the title to \"Lab 0\"\n\n- Put your name on it\n\n- Leave the date alone. That little `` `r Sys.time(...)` `` will ask R to return the date (with M-D-Y formatting), which Rmarkdown will put in as if you had typed in the actual date. **Note - if your system time is rendered in unicode characters (which may be the case in some languages), you will get an error**. If this happens, you'll have to manually change the date in the header along with your name.\n\n- When you type `## 1. Text of...`, Markdown will recognize \"1. Text of\" as a header and will *automatically* make it big.\n\n  - So please copy the number and text of the question you are answering here.\n  \n- Next will be the `` ```{r q1} `` text that will be in gray. **R will recognize this as code and will treat it as such**. Anything run in that block will have an output. \n\n  - If you want to see what the code will do, copy the code and paste it into the gray area. Then, click the green right arrow in the top-right corner *of the gray code chunk*. It should show you the results.\n  \n  - Use the results (plus your understanding of the code) to answer the questions below.\n  \n- With each completed question, click the \"Knit\" button up above the script window. Rmarkdown will create a .pdf for you of your work (as long as it doesn't hit any R errors). Knit often to make sure you haven't hit an error!\n\n- The ``\\newpage`` line is a Latex command (the program that makes the typesetting look nice). It will start a new pdf page. \n\n- On the next page, copy question #2 to a new header using `##`.\n\n- Keep going until done. Render one last .pdf, proofread it, and turn it in on D2L!\n\nFor more on using R Markdown, see the [R Markdown page of our course resources](/resource/rmarkdown/). You can also learn about the general Markdown language [on our Markdown page of our course resources](/resource/markdown/)\n\n:::fyi\n**EXERCISES**\n\n0. In your first code chunk, load the package library `tidyverse`, which you will need for Question 8. Always load all your package libraries at the top, in the first code chunk! \n\n1. What will this conditional expression return and why?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(1,2,-3,4)\n\nif(all(x>0)){\n  print(\"All Postives\")\n} else{\n  print(\"Not all positives\")\n}\n```\n:::\n\n\n\n2. Which of the following expressions is always `FALSE` when at least one entry of a logical vector `x` is TRUE?\n\na. `all(x)`\nb. `any(x)`\nc. `any(!x)`\nd. `all(!x)`\n\n3. The function `nchar` tells you how many characters long a character vector is. Write a line of code that assigns a new column in `murders` called `new_names` that is equal to the `state` column. Then, replace `new_names` with the corresponding state abbreviation when the state name is longer than 8 characters. \n\n4. Create a function `sum_n` that for any given value, say $n$, computes the sum of the integers from 1 to n (inclusive). Use the function to determine the sum of integers from 1 to 5,000.\n\n5. Create a function `altman_plot` that takes two arguments, `x` and `y`, and plots the difference against the sum. That is, the *difference* should be on the y-axis and the and the sum should be on the x-axis. Use it to make an altman plot of `x <- c(5,7,9)` and `y <- c(10,11,12)`. When your function creates the plot, it will output automatically in your Rmarkdown knitted .pdf.\n\n6. After running the code below, what is the value of `x` and why?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 3\nmy_func <- function(y){\n  x <- 5\n  y+5\n}\n```\n:::\n\n\n7. Write a function `compute_s_n` that for any given $n$ computes the sum $S_n = 1^2 + 2^2 + 3^2 + \\dots n^2$. Report the value of the sum when $n=10$.\n\n8. Define an empty numerical vector `s_n` of size 25 using `s_n <- vector(\"numeric\", 25)` and store in the results of $S_1, S_2, \\dots S_{25}$ using a for-loop.\n\n9. Repeat exercise 8, but this time use `sapply`.\n\n10. Repeat exercise 8, but this time use `map_dbl`.\n\n11. Plot $S_n$ versus $n$. Use points defined by $n=1,\\dots,25$.\n\n12. Confirm that the equivalent formula for this sum is $S_n= n(n+1)(2n+1)/6$. To do so, compare whether `compute_s_n` gives the same result for the vector `s_n` as the equivalent formula for the sum. \n:::\n",
    "supporting": [
      "01-assignment_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}