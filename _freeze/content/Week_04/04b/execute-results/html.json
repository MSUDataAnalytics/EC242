{
  "hash": "1729293fc97c9b5e95c34538374b1997",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Visualizations\"\nlinktitle: \"4: Visualization III\"\nread_date: \"2024-02-01\"\ndraft: false\nlastmod: \"2024-09-19\"\noutput:\n  blogdown::html_page:\n    toc: true\nmenu:\n  example:\n    parent: Examples\n    weight: 1\ntype: docs\nweight: 1\neditor_options:\n  chunk_output_type: console\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n\n# Group Projects\nThis class has three group projects - Project 1, Project 2, and the Final Project - that comprise a significant portion of your grade. \n\nThis week, we will form groups for these projects. You will work with the same group for each of the projects. The details will be posted soon, but the general idea is that you are given some data and asked to use your visualization and analytical skills to illustrate important patterns in the data. The final project will be on a topic of your group's choice, while the first two will use data given as part of the assignment.\n\nGroups may be 2 or 3 people, no more and no less. You are free to form your own group and anyone who does not form one will be assigned to one. With that in mind, **let's form our groups**.\n\nIf you have a group of 2-3 individuals willing to work together for these three projects, do the following **before this coming Sunday night at 11:59 pm**:\n\n  1. Think of a group name\n  2. Have *one* person in the group email our TA, Zach, at {{< var email.TA >}} with the following:\n  \n  - The subject should be [EC242 Group Formation]\n\n  - The email should CC *all* of the group members (so you know when you've been added to a group)\n\n  - The email should list the names (as they appear in D2L) of each of the group members\n\n  - The email should include the group name\n\nIf you would prefer to be assigned to a group, you don't have to do anything. Once our TA has the voluntary groups set, they will assign groups to the rest of the class and email each group with instructions.\n\n\n\n\n# Data visualization in practice {#gapminder}\n\nIn this lecture, we will demonstrate how relatively simple __ggplot2__ code can create insightful and aesthetically pleasing plots. As motivation we will create plots that help us better understand trends in world health and economics. We will implement what we learned in previous sections of the class and learn how to augment the code to perfect the plots. As we go through our case study, we will describe relevant general data visualization principles.\n\n\n## Case study: new insights on poverty\n\nHans Rosling^[https://en.wikipedia.org/wiki/Hans_Rosling] was the co-founder of the Gapminder Foundation^[http://www.gapminder.org/], an organization dedicated to educating the public by using data to dispel common myths about the so-called developing world. The organization uses data to show how actual trends in health and economics contradict the narratives that emanate from sensationalist media coverage of catastrophes, tragedies, and other unfortunate events. As stated in the Gapminder Foundation's website:\n\n> Journalists and lobbyists tell dramatic stories. That’s their job. They tell stories about extraordinary events and unusual people. The piles of dramatic stories pile up in peoples' minds into an over-dramatic worldview and strong negative stress feelings: \"The world is getting worse!\", \"It’s we vs. them!”, “Other people are strange!\", \"The population just keeps growing!\" and \"Nobody cares!\"\n\nHans Rosling conveyed actual data-based trends in a dramatic way of his own, using effective data visualization. This section is based on two talks that exemplify this approach to education: [New Insights on Poverty]^[https://www.ted.com/talks/hans_rosling_reveals_new_insights_on_poverty?language=en] and The Best Stats You've Ever Seen^[https://www.ted.com/talks/hans_rosling_shows_the_best_stats_you_ve_ever_seen]. Specifically, in this section, we use data to attempt to answer the following two questions:\n\n1. Is it a fair characterization of today's world to say it is divided into western rich nations and the developing world in Africa, Asia, and Latin America?\n2. Has income inequality across countries worsened during the last 40 years?\n\nTo answer these questions, we will be using the `gapminder` dataset provided in __dslabs__. This dataset was created using a number of spreadsheets available from the Gapminder Foundation. You can access the table like this:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(dslabs)\nlibrary(ggrepel)\nlibrary(ggthemes)\ngapminder = dslabs::gapminder %>% as_tibble()\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n\n\n### Exploring the Data\n\nTaking an exercise from the _New Insights on Poverty_ video, we start by testing our knowledge regarding differences in child mortality across different countries. For each of the six pairs of countries below, which country do you think had the highest child mortality rates in 2015? Which pairs do you think are most similar?\n\n1. Sri Lanka or Turkey\n2. Poland or South Korea\n3. Malaysia or Russia\n4. Pakistan or Vietnam\n5. Thailand or South Africa\n\nWhen answering these questions without data, the non-European countries are typically picked as having higher child mortality rates: Sri Lanka over Turkey, South Korea over Poland, and Malaysia over Russia. It is also common to assume that countries considered to be part of the developing world: Pakistan, Vietnam, Thailand, and South Africa, have similarly high mortality rates.\n\nTo answer these questions __with data__, we can use __tidyverse__ functions. For example, for the first comparison we see that:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndslabs::gapminder %>%\n  filter(year == 2015 & country %in% c(\"Sri Lanka\",\"Turkey\")) %>%\n  select(country, infant_mortality)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    country infant_mortality\n1 Sri Lanka              8.4\n2    Turkey             11.6\n```\n\n\n:::\n:::\n\n\n\nTurkey has the higher infant mortality rate.\n\nWe can use this code on all comparisons and find the following:\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-striped\" style=\"width: auto !important; margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> country </th>\n   <th style=\"text-align:right;\"> infant mortality </th>\n   <th style=\"text-align:left;\"> country </th>\n   <th style=\"text-align:right;\"> infant mortality </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> Sri Lanka </td>\n   <td style=\"text-align:right;\"> 8.4 </td>\n   <td style=\"text-align:left;\"> Turkey </td>\n   <td style=\"text-align:right;\"> 11.6 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Poland </td>\n   <td style=\"text-align:right;\"> 4.5 </td>\n   <td style=\"text-align:left;\"> South Korea </td>\n   <td style=\"text-align:right;\"> 2.9 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Malaysia </td>\n   <td style=\"text-align:right;\"> 6.0 </td>\n   <td style=\"text-align:left;\"> Russia </td>\n   <td style=\"text-align:right;\"> 8.2 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Pakistan </td>\n   <td style=\"text-align:right;\"> 65.8 </td>\n   <td style=\"text-align:left;\"> Vietnam </td>\n   <td style=\"text-align:right;\"> 17.3 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Thailand </td>\n   <td style=\"text-align:right;\"> 10.5 </td>\n   <td style=\"text-align:left;\"> South Africa </td>\n   <td style=\"text-align:right;\"> 33.6 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n\n\nWe see that the European countries on this list have higher child mortality rates: Poland has a higher rate than South Korea, and Russia has a higher rate than Malaysia. We also see that Pakistan has a much higher rate than Vietnam, and South Africa has a much higher rate than Thailand. It turns out that when Hans Rosling gave this quiz to educated groups of people, the average score was less than 2.5 out of 5, worse than what they would have obtained had they guessed randomly. This implies that more than ignorant, we are misinformed. In this chapter we see how data visualization helps inform us by presenting *patterns in the data* that might not be obvious on first glance.\n\n\n\n\n\n### Slope charts \nThe slopechart is informative when you are comparing variables of the same type, but at different time points and for a relatively small number of comparisons. For example, comparing life expectancy between 2010 and 2015. In this case, we might recommend a _slope chart_.\n\nThere is no geometry for slope charts in __ggplot2__, but we can construct one using `geom_line`. We need to do some tinkering to add labels. We'll paste together a character stright with the country name and the starting life expectancy, then do the same with just the later life expectancy for the right side. Below is an example comparing 2010 to 2015 for large western countries: \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwest <- c(\"Western Europe\",\"Northern Europe\",\"Southern Europe\",\n          \"Northern America\",\"Australia and New Zealand\")\n\ndat <- gapminder %>%\n  filter(year%in% c(2010, 2015) & region %in% west &\n           !is.na(life_expectancy) & population > 10^7) %>%\n    mutate(label_first = ifelse(year == 2010, paste0(country, \": \", round(life_expectancy, 1), ' years'), NA),\n           label_last = ifelse(year == 2015,  paste0(round(life_expectancy, 1),' years'), NA))\n\ndat %>%\n  mutate(location = ifelse(year == 2010, 1, 2),\n         location = ifelse(year == 2015 &\n                             country %in% c(\"United Kingdom\", \"Portugal\"),\n                           location+0.22, location),\n         hjust = ifelse(year == 2010, 1, 0)) %>%\n  mutate(year = as.factor(year)) %>%\n  ggplot(aes(year, life_expectancy, group = country)) +\n  geom_line(aes(color = country), show.legend = FALSE) +\n  geom_text_repel(aes(label = label_first, color = country), direction = 'y', nudge_x = -1, seed = 1234, show.legend = FALSE) +\n  geom_text_repel(aes(label = label_last, color = country), direction = 'y', nudge_x =  1, seed = 1234, show.legend = FALSE) +\n  xlab(\"\") + ylab(\"Life Expectancy\")\n```\n\n::: {.cell-output-display}\n![](04b_files/figure-html/slope-plot-1.png){width=672}\n:::\n:::\n\n\n\n\nAn advantage of the slope chart is that it permits us to quickly get an idea of changes based on the slope of the lines. Although we are using angle as the visual cue, we also have position to determine the exact values. Comparing the improvements is a bit harder with a scatterplot:\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](04b_files/figure-html/scatter-plot-instead-of-slope-1.png){width=672}\n:::\n:::\n\n\n\n\nIn the scatterplot, we have followed the principle _use common axes_ since we are comparing these before and after. However, if we have many points, slope charts stop being useful as it becomes hard to see all the lines.\n\n### Bland-Altman plot\n\nSince we are primarily interested in the difference, it makes sense to dedicate one of our axes to it. The Bland-Altman plot, also known as the Tukey mean-difference plot and the MA-plot, shows the difference versus the average:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat %>%\n  group_by(country) %>%\n  filter(year %in% c(2010, 2015)) %>%\n  dplyr::summarize(average = mean(life_expectancy),\n                   difference = life_expectancy[year==2015]-life_expectancy[year==2010]) %>%\n  ggplot(aes(average, difference, label = country)) +\n  geom_point() +\n  geom_text_repel() +\n  geom_abline(lty = 2) +\n  xlab(\"Average of 2010 and 2015\") +\n  ylab(\"Difference between 2015 and 2010\")\n```\n\n::: {.cell-output-display}\n![](04b_files/figure-html/bland-altman-1.png){width=672}\n:::\n:::\n\n\n\n\nHere, by simply looking at the y-axis, we quickly see which countries have shown the most improvement. We also get an idea of the overall value from the x-axis. You already made a similar Altman plot in an earlier problem set, so we'll move on.\n\n\n\n\n\n\n### Bump charts\n\nFinally, we can make a bump chart that shows changes in rankings over time. We'll look at fertility in South Asia. First we need to calculate a new variable that shows the rank of each country within each year. We can do this if we group by year and then use the `rank()` function to rank countries by the `fertility` column.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsa_fe <- gapminder %>%\n  filter(region == \"Southern Asia\") %>%\n  filter(year >= 2004, year < 2015) %>%\n  group_by(year) %>%\n  mutate(rank = rank(fertility))\n```\n:::\n\n\n\n\nWe then plot this with points and lines, reversing the y-axis so 1 is at the top:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(sa_fe, aes(x = year, y = rank, color = country)) +\n  geom_line() +\n  geom_point() +\n  scale_y_reverse(breaks = 1:8) +\n  labs(x = \"Year\", y = \"Rank\", color = \"Country\")\n```\n\n::: {.cell-output-display}\n![](04b_files/figure-html/make-bump-plot-1.png){width=672}\n:::\n:::\n\n\n\n\nIran holds the number 1 spot, while Sri Lanka dropped from 2 to 6, and Bangladesh increased from 4 to 2.\n\nAs with the slopegraph, there are 8 different colors in the legend and it's hard to line them all up with the different lines, so we can plot the text directly instead. We'll use `geom_text()` again. We don't need to repel anything, since the text should fit in each row just fine. We need to change the `data` argument in `geom_text()` though and filter the data to only include one year, otherwise we'll get labels on every point, which is excessive. We can also adjust the theme and colors to make it cleaner.\n\n\n\n\n::: {.cell warnings='false'}\n\n```{.r .cell-code}\nbumpplot <- ggplot(sa_fe, aes(x = year, y = rank, color = country)) +\n  geom_line(size = 2) +\n  geom_point(size = 4) +\n  geom_text(data = sa_fe %>% dplyr::filter(year==2004) %>% arrange(rank),\n            aes(label = country, x = 2003), fontface = \"bold\", angle = 45) +\n geom_text(data = sa_fe %>% dplyr::filter(year==2014) %>% arrange(rank),\n            aes(label = country, x = 2015), fontface = \"bold\", angle = 45) + \n  guides(color = 'none') + # another way of turning off legend\n  scale_y_reverse(breaks = 1:8) +\n  scale_x_continuous(breaks = 2004:2014) +\n  scale_color_viridis_d(option = \"C\", begin = 0.2, end = 0.9) +\n  labs(x = NULL, y = \"Rank\") +\n  theme(plot.margin = unit(c(0.5, 0.5, 0.5, 0.5),  \"inches\")) \n\nbumpplot\n```\n\n::: {.cell-output-display}\n![](04b_files/figure-html/bump-plot-fancier-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n### Themes\nWe can go a little further towards a clean, easy-to-read data visualization by using __themes__ in our plots. Themes allow us to set a particular range of plot settings in one command, and let us further tweak things like fonts, background colors, and much more. We've used them in passing a few times without highlighting them, but we'll discuss them here.\n\nA pre-constructed set of instructions for making a visual theme can be had by using a theme's `ggplot` function. Let's look at two of my favorites.\n\n`theme_bw()` uses the black-and-white theme, which is helpful in making a nice, clean plot:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbumpplot + theme_bw()\n```\n\n::: {.cell-output-display}\n![](04b_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n\nThe background shading is gone, which gives the plot a nice, crisp feel. It adds the black outline around the plot, but doesn't mess with the colors in the plot.\n\nHere's `theme_minimal()`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbumpplot + theme_minimal()\n```\n\n::: {.cell-output-display}\n![](04b_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n\nThemes can alter things in the plot as well. If we really want to strip it down and remove the Y-axis (which is rarely a good idea, but in a bump chart, it makes sense):\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbumpplot + theme_void()\n```\n\n::: {.cell-output-display}\n![](04b_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n\nNow **that's** clean!\n\nIn our opening unit, we had a plot that was styled after the plots in the magazine, *The Economist*. That's a theme (in the `ggthemes` package that we loaded at the top)!\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbumpplot + theme_economist()\n```\n\n::: {.cell-output-display}\n![](04b_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n\nThemes affect some of the plot elements that we haven't gotten much into (like length of axis ticks and the color of the panel grid behind the plot). We can use a theme, then make further changes to the theme. We won't go into a lot of detail, but here's an example. Use the `?theme` to learn more about what you can change. Half the challenge is finding the right term for the thing you want to tweak! Theme changes occur in code order, so you can update a pre-set theme with your own details:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbumpplot +   theme_bw() + theme(strip.text = element_text(face = \"bold\"),\n                   plot.title = element_text(face = \"bold\"),\n                   axis.text.x = element_text(angle = 45, hjust = 1),\n                   panel.grid.major.y = element_blank(), # turn off all of the Y grid\n                   panel.grid.minor.y = element_blank(),\n                   panel.grid.minor.x = element_blank()) # turn off small x grid\n```\n\n::: {.cell-output-display}\n![](04b_files/figure-html/bump-plot-fancierest-1.png){width=672}\n:::\n:::\n\n\n\n\n### Theme elements\nThe above code looks a little odd in that asking it to leave out the minor and major Y grid, and the major X grid, required `element_blank()`, a function! Since a \"blank\" part (or a solid color part) might entail a lot of particular things, the ggplot function is necessary here to take care of all the particular details. \n\nRelatedly, if we wanted to change the background color of some panel (the plotted area), then `element_rect()` would be used because the panel is a rectangle. The theme argument would be `panel.background =element_rect(fill=\"red\")` if we wanted to make it red (and hideous)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbumpplot +   theme_bw() + theme(strip.text = element_text(face = \"bold\"),\n                                panel.background  = element_rect(fill='red'),\n                   plot.title = element_text(face = \"bold\"),\n                   axis.text.x = element_text(angle = 45, hjust = 1),\n                   panel.grid.major.y = element_blank(), # turn off all of the Y grid\n                   panel.grid.minor.y = element_blank(),\n                   panel.grid.minor.x = element_blank()) # turn off small x grid\n```\n\n::: {.cell-output-display}\n![](04b_files/figure-html/bump-plot-fancierestest-1.png){width=672}\n:::\n:::\n\n\n\n\nWe can also set the `strip.background` for the \"strip\" rectangles that label our `facet_wrap` and `facet_grid`sections,and `plot.background` for the area behind the plot panel.\n\nIn the above example, we also set the `element_text` function for the axis text and specified a rotation (see the years are at 45 degrees) and a horizontal-adjustment so that they center over the line. `element_text` is a theme element that controls how the text looks (including font, face, color, etc). This is particularly useful when you have appropriate axis labels that might be long, like the `scales::label_comma` [from earlier this week](/content/Week_04/04a.html/#labelerFunctions). We can avoid scrunching our labels by using `element_text` to set a new angle (45 or 90).\n\n\n\n\n### Small multiples\n\nFirst we can make some small multiples plots and show life expectancy over time for a handful of countries. We'll make a list of some countries chosen at random while I scrolled through the data, and then filter our data to include only those rows. We then plot life expectancy, faceting by country.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlife_expectancy_small <- gapminder %>%\n  filter(country %in% c(\"Argentina\", \"Bolivia\", \"Brazil\",\n                        \"Belize\", \"Canada\", \"Chile\"))\nggplot(data = life_expectancy_small,\n       mapping = aes(x = year, y = life_expectancy)) +\n  geom_line(size = 1) +\n  facet_wrap(vars(country))\n```\n\n::: {.cell-output-display}\n![](04b_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n\nSmall multiples! That's all we need to do.\n\nWe can do some fancier things, though. We can make this plot hyper minimalist with a __theme__:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = life_expectancy_small,\n       mapping = aes(x = year, y = life_expectancy)) +\n  geom_line(size = 1) +\n  facet_wrap(vars(country), scales = \"free_y\") +\n  theme_void() +\n  theme(strip.text = element_text(face = \"bold\"))\n```\n\n::: {.cell-output-display}\n![](04b_files/figure-html/life-expectancy-small-minimalist-1.png){width=672}\n:::\n:::\n\n\n\n\nWe can do a whole part of a continent (poor Syria 😿)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlife_expectancy_mena <- gapminder %>%\n  filter(region == \"Northern Africa\" | region == \"Western Asia\")\n\nggplot(data = life_expectancy_mena,\n       mapping = aes(x = year, y = life_expectancy)) +\n  geom_line(size = 1) +\n  facet_wrap(vars(country), scales = \"free_y\", nrow = 3) +\n  theme_void() +\n  theme(strip.text = element_text(face = \"bold\"))\n```\n\n::: {.cell-output-display}\n![](04b_files/figure-html/life-expectancy-mena-1.png){width=960}\n:::\n:::\n\n\n\n\nWe can use the [**geofacet** package](https://hafen.github.io/geofacet/) to arrange these facets by geography:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(geofacet)\n\nlife_expectancy_eu <- gapminder %>%\n  filter(region== 'Western Europe' | region=='Northern Europe' | region=='Southern Europe')\n\nggplot(life_expectancy_eu, aes(x = year, y = life_expectancy)) +\n  geom_line(size = 1) +\n  facet_geo(vars(country), grid = \"europe_countries_grid1\", scales = \"free_y\") +\n  labs(x = NULL, y = NULL, title = \"Life expectancy from 1960–2015\",\n       caption = \"Source: Gapminder\") +\n  theme_minimal() +\n  theme(strip.text = element_text(face = \"bold\"),\n        plot.title = element_text(face = \"bold\"),\n        axis.text.x = element_text(angle = 45, hjust = 1))\n```\n\n::: {.cell-output-display}\n![](04b_files/figure-html/life-expectancy-eu-1.png){width=960}\n:::\n:::\n\n\n\n\nNeat!\n\nAnybody see any problems here?\n\n\n\n## The ecological fallacy and importance of showing the data\n\nThroughout this section, we have been comparing regions of the world. We have seen that, on average, some regions do better than others. In this section, we focus on describing the importance of variability within the groups when examining the relationship between a country's infant mortality rates and average income.\n\nWe define a few more regions and compare the averages across regions:\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](04b_files/figure-html/ecological-fallacy-averages-1.png){width=672}\n:::\n:::\n\n\n\n\nThe relationship between these two variables is almost perfectly linear and the graph shows a dramatic difference. While in the West less than 0.5% of infants die, in Sub-Saharan Africa the rate is higher than 6%!\n\nNote that the plot uses a new transformation, the logit transformation.\n\n### Logit transformation {#logit}\nThe logit transformation for a proportion or rate $p$ is defined as:\n\n$$f(p) = \\log \\left( \\frac{p}{1-p} \\right)$$\n\nWhen $p$ is a proportion or probability, the quantity that is being logged, $p/(1-p)$, is called the _odds_. In this case $p$ is the proportion of infants that survived. The odds tell us how many more infants are expected to survive than to die. The log transformation makes this symmetric. If the rates are the same, then the log odds is 0. Fold increases or decreases turn into positive and negative increments, respectively.\n\nThis scale is useful when we want to highlight differences near 0 or 1. For survival rates this is important because a survival rate of 90% is unacceptable, while a survival of 99% is relatively good. We would much prefer a survival rate closer to 99.9%. We want our scale to highlight these difference and the logit does this. Note that 99.9/0.1 is about 10 times bigger than 99/1 which is about 10 times larger than 90/10. By using the log, these fold changes turn into constant increases.\n\n### Show the data\n\nNow, back to our plot. Based on the plot above, do we conclude that a country with a low income is destined to have low survival rate? Do we conclude that survival rates in Sub-Saharan Africa are all lower than in Southern Asia, which in turn are lower than in the Pacific Islands, and so on?\n\nJumping to this conclusion based on a plot showing averages is referred to as the _ecological fallacy_. The almost perfect relationship between survival rates and income is only observed for the averages at the region level. Once we show all the data, we see a somewhat more complicated story:\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](04b_files/figure-html/ecological-fallacy-all-data-1.png){width=672}\n:::\n:::\n\n\n\n\nSpecifically, we see that there is a large amount of variability. We see that countries from the same regions can be quite different and that countries with the same income can have different survival rates. For example, while on average Sub-Saharan Africa had the worse health and economic outcomes, there is wide variability within that group. Mauritius and Botswana are doing better than Angola and Sierra Leone, with Mauritius comparable to Western countries.\n\n## Case study: vaccines and infectious diseases {#vaccines}\n\nVaccines have helped save millions of lives. In the 19th century, before herd immunization was achieved through vaccination programs, deaths from infectious diseases, such as smallpox and polio, were common. However, today vaccination programs have become somewhat controversial despite all the scientific evidence for their importance.\n\nThe controversy started with a paper^[http://www.thelancet.com/journals/lancet/article/PIIS0140-6736(97)11096-0/abstract] published in 1988 and led by Andrew Wakefield claiming\nthere was a link between the administration of the measles, mumps, and rubella (MMR) vaccine and the appearance of autism and bowel disease.\nDespite much scientific evidence contradicting this finding, sensationalist media reports and fear-mongering from conspiracy theorists led parts of the public into believing that vaccines were harmful. As a result, many parents ceased to vaccinate their children. This dangerous practice can be potentially disastrous given that the Centers for Disease Control (CDC) estimates that vaccinations will prevent more than 21 million hospitalizations and 732,000 deaths among children born in the last 20 years (see Benefits from Immunization during the Vaccines for Children Program Era — United States, 1994-2013, MMWR^[https://www.cdc.gov/mmwr/preview/mmwrhtml/mm6316a4.htm]).\nThe 1988 paper has since been retracted and Andrew Wakefield was eventually \"struck off the UK medical register, with a statement identifying deliberate falsification in the research published in The Lancet, and was thereby barred from practicing medicine in the UK.\" (source: Wikipedia^[https://en.wikipedia.org/wiki/Andrew_Wakefield]). Yet misconceptions persist, in part due to self-proclaimed activists who continue to disseminate misinformation about vaccines.\n\nEffective communication of data is a strong antidote to misinformation and fear-mongering. Earlier we used an example provided by a Wall Street Journal article^[http://graphics.wsj.com/infectious-diseases-and-vaccines/] showing data related to the impact of vaccines on battling infectious diseases.  Here we reconstruct that example.\n\nThe data used for these plots were collected, organized, and distributed by the Tycho Project^[http://www.tycho.pitt.edu/]. They include weekly reported counts for seven diseases from 1928 to 2011, from all fifty states. The yearly totals are helpfully included in the __dslabs__ package:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(RColorBrewer)\ndata(us_contagious_diseases)\nnames(us_contagious_diseases)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"disease\"         \"state\"           \"year\"            \"weeks_reporting\"\n[5] \"count\"           \"population\"     \n```\n\n\n:::\n:::\n\n\n\n\nWe create a temporary object `dat` that stores only the measles data, includes a per 100,000 rate, orders states by average value of disease and removes Alaska and Hawaii since they only became states in the late 1950s. Note that there is a `weeks_reporting` column that tells us for how many weeks of the year data was reported. We have to adjust for that value when computing the rate.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthe_disease <- \"Measles\"\ndat <- us_contagious_diseases %>%\n  filter(!state%in%c(\"Hawaii\",\"Alaska\") & disease == the_disease) %>%\n  mutate(rate = count / population * 10000 * 52 / weeks_reporting) %>%\n  mutate(state = reorder(state, rate))\n```\n:::\n\n\n\n\nWe can now easily plot disease rates per year. Here are the measles data from California:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat %>% filter(state == \"California\" & !is.na(rate)) %>%\n  ggplot(aes(year, rate)) +\n  geom_line() +\n  ylab(\"Cases per 10,000\")  +\n  geom_vline(xintercept=1963, col = \"blue\")\n```\n\n::: {.cell-output-display}\n![](04b_files/figure-html/california-measles-time-series-1.png){width=672}\n:::\n:::\n\n\n\n\nWe add a vertical line at 1963 since this is when the vaccine was introduced [Control, Centers for Disease; Prevention (2014). CDC health information for international travel 2014 (the yellow book). p. 250. ISBN 9780199948505].\n\nNow can we show data for all states in one plot? We have three variables to show: year, state, and rate. In the WSJ figure, they use the x-axis for year, the y-axis for state, and color hue to represent rates. However, the color scale they use, which goes from yellow to blue to green to orange to red, can be improved.\n\nIn our example, we want to use a sequential palette since there is no meaningful center, just low and high rates.\n\nWe use the geometry `geom_tile` to tile the region with colors representing disease rates. We use a square root transformation to avoid having the really high counts dominate the plot. Notice that missing values are shown in grey. Note that once a disease was pretty much eradicated, some states stopped reporting cases all together. This is why we see so much grey after 1980.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat %>% \n  mutate(state = factor(state, levels = rev(levels(state)[order(levels(state))]))) %>%\n  ggplot(aes(year, state, fill = rate)) +\n  geom_tile(color = \"grey50\") +\n  scale_x_continuous(expand=c(0,0)) +\n  scale_fill_gradientn(colors = brewer.pal(9, \"Reds\"), trans = \"sqrt\") +\n  geom_vline(xintercept=1963, col = \"blue\") +\n  theme_minimal() +\n  theme(panel.grid = element_blank(),\n        legend.position=\"bottom\",\n        text = element_text(size = 8)) +\n  ggtitle(the_disease) +\n  ylab(\"\") + xlab(\"\")\n```\n\n::: {.cell-output-display}\n![](04b_files/figure-html/vaccines-plot-1.png){width=100%}\n:::\n:::\n\n\n\n\nThis plot makes a very striking argument for the contribution of vaccines. However, one limitation of this plot is that it uses color to represent quantity, which we earlier explained makes it harder to know exactly how high values are going. Position and lengths are better cues. If we are willing to lose state information, we can make a version of the plot that shows the values with position. We can also show the average for the US, which we compute like this:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\navg <- us_contagious_diseases %>%\n  filter(disease==the_disease) %>% group_by(year) %>%\n  summarize(us_rate = sum(count, na.rm = TRUE) /\n              sum(population, na.rm = TRUE) * 10000)\n```\n:::\n\n\n\n\nNow to make the plot we simply use the `geom_line` geometry:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat %>%\n  filter(!is.na(rate)) %>%\n    ggplot() +\n  geom_line(aes(year, rate, group = state),  color = \"grey50\",\n            show.legend = FALSE, alpha = 0.2, size = 1) +\n  geom_line(mapping = aes(year, us_rate),  data = avg, size = 1) +\n  scale_y_continuous(trans = \"sqrt\", breaks = c(5, 25, 125, 300)) +\n  ggtitle(\"Cases per 10,000 by state\") +\n  xlab(\"\") + ylab(\"\") +\n  geom_text(data = data.frame(x = 1955, y = 50),\n            mapping = aes(x, y, label=\"US average\"),\n            color=\"black\") +\n  geom_vline(xintercept=1963, col = \"blue\")\n```\n\n::: {.cell-output-display}\n![](04b_files/figure-html/time-series-vaccines-plot-1.png){width=672}\n:::\n:::\n\n\n\n\nIn theory, we could use color to represent the categorical value state, but it is hard to pick 50 distinct colors.\n\n\n### Saving your plot\nIn RMarkdown, we display the plot as part of the chunk output. For your group project (or for future use) you'll likely need to save your plot as well. The function `ggsave` is a good way of outputting your plot. \n\n```\nggsave(myPlot, file = 'myPlot.png', width = 7, height = 5, dpi=300)\n```\nFile type will be discerned from the suffix on the file, and the height and width are in inches. The `dpi` argument sets the pixes-per-inch. Generally, screens display at around 150 (though this is rapidly increasing, it used to be 72 dpi), and print is usually 300 or better. A width of 5 inches at 300 dpi will render an image 1,500 pixels across.\n\n\n\n\n::: {.callout-note}\n\n## TRY IT\n\n1. Reproduce the heatmap plot we previously made but for smallpox. For this plot, do not include years in which cases were not reported in 10 or more weeks.\n\n2. Now reproduce the time series plot we previously made, but this time following the instructions of the previous question for smallpox.\n\n3. For the state of California, make a time series plot showing rates for all diseases. Include only years with 10 or more weeks reporting. Use a different color for each disease.\n\n4. Now do the same for the rates for the US. Hint: compute the US rate by using summarize: the total divided by total population.\n\n:::\n\n\n\n\n\n\n",
    "supporting": [
      "04b_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"../../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}