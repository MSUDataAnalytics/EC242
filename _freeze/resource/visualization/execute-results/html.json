{
  "hash": "00718eca6d653f879face4a3a9991708",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Visualization\nsidebar: resources\n---\n\n\n\n\n\n## Supplemental Visualization\n\n\n### [Combining plots using Patchwork](#patchwork)\nA good alternative to using two y-axes is to use two plots instead. The [**patchwork** package](https://github.com/thomasp85/patchwork) makes this *really* easy to do with R. There are other similar packages that do this, like **cowplot** and **gridExtra**, but I've found that **patchwork** is the easiest to use *and* it actually aligns the different plot elements like axis lines and legends. The [documentation for **patchwork**](https://patchwork.data-imaginist.com/articles/guides/assembly.html) is really great and full of examples—you should check it out to see all the things you can do with it!\n\nFirst, we load the libraries and data we'll be using. We loaded the Atlanta weather data in Example 05:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)  # For ggplot, dplyr, and friends\nlibrary(patchwork)  # For combining ggplot plots\nweather_atl <- read_csv(\"/data/atl-weather-2019.csv\")\n```\n:::\n\n\n\n\n\n```\n\nTo use **patchwork**, we need to (1) save our plots as objects and (2) add them together with `+`.\n\nFor instance, is there a relationship between temperature and humidity in Atlanta? We can plot both:\n\n::: {.cell}\n\n```{.r .cell-code}\n# Temperature in Atlanta\ntemp_plot <- ggplot(weather_atl, aes(x = time, y = temperatureHigh)) +\n  geom_line() +\n  geom_smooth() +\n  scale_y_continuous(sec.axis = sec_axis(trans = ~ (32 - .) * -5/9,\n                                         name = \"Celsius\")) +\n  labs(x = NULL, y = \"Fahrenheit\") +\n  theme_minimal()\ntemp_plot\n```\n\n::: {.cell-output-display}\n![](visualization_files/figure-html/create-temp-humid-plots-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Humidity in Atlanta\nhumidity_plot <- ggplot(weather_atl, aes(x = time, y = humidity)) +\n  geom_line() +\n  geom_smooth() +\n  labs(x = NULL, y = \"Humidity\") +\n  theme_minimal()\nhumidity_plot\n```\n\n::: {.cell-output-display}\n![](visualization_files/figure-html/create-temp-humid-plots-2.png){width=672}\n:::\n:::\n\nRight now, these are two separate plots, but we can combine them with `+` if we load **patchwork**:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(patchwork)\n\ntemp_plot + humidity_plot\n```\n\n::: {.cell-output-display}\n![](visualization_files/figure-html/patchwork-first-1.png){width=672}\n:::\n:::\n\n\n\n\nBy default, **patchwork** will put these side-by-side. We can specify that we want the plots to be oriented over/under:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntemp_plot / humidity_plot\n```\n\n::: {.cell-output-display}\n![](visualization_files/figure-html/patchwork-vertical-1-1.png){width=672}\n:::\n:::\n\n\n\n\nOr we can change the orientation with the `plot_layout()` function:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntemp_plot + humidity_plot +\n  plot_layout(ncol = 1)\n```\n\n::: {.cell-output-display}\n![](visualization_files/figure-html/patchwork-vertical-1.png){width=672}\n:::\n:::\n\n\n\n\n\nWe can also play with other arguments in `plot_layout()`. If we want to make the temperature plot taller and shrink the humidity section, we can specify the proportions for the plot heights. Here, the temperature plot is 70% of the height and the humidity plot is 30%:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntemp_plot + humidity_plot +\n  plot_layout(ncol = 1, heights = c(0.7, 0.3))\n```\n\n::: {.cell-output-display}\n![](visualization_files/figure-html/patchwork-vertical-resized-1.png){width=672}\n:::\n:::\n\n\n\n\n\n### Legal dual y-axes\nIt is fine (and often helpful) to use two y-axes if the two different scales measure the same thing, like counts and percentages, Fahrenheit and Celsius, pounds and kilograms, inches and centimeters, etc.\n\nTo do this, you need to add an argument (`sec.axis`) to `scale_y_continuous()` to tell it to use a second axis. This `sec.axis` argument takes a `sec_axis()` function that tells ggplot how to transform the scale. You need to specify a formula or function that defines how the original axis gets transformed. This formula uses a special syntax. It needs to start with a `~`, which indicates that it's a function, and it needs to use `.` to stand in for the original value in the original axis.\n\nSince the equation for converting Fahrenheit to Celsius is this…\n\n$$\n\\text{C} = (32 - \\text{F}) \\times -\\frac{5}{9}\n$$\n\n…we can specify this with code like so (where `.` stands for the Fahrenheit value):\n\n```text\n~ (32 - .) * -5 / 9\n```\n\nHere's a plot of daily high temperatures in Atlanta throughout 2019, with a second axis:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(weather_atl, aes(x = time, y = temperatureHigh)) +\n  geom_line() +\n  scale_y_continuous(sec.axis = sec_axis(trans = ~ (32 - .) * -5/9,\n                                         name = \"Celsius\")) +\n  labs(x = NULL, y = \"Fahrenheit\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](visualization_files/figure-html/atl-weather-dual-axes-1.png){width=672}\n:::\n:::\n\n\n\n\nFor fun, we could also convert it to Kelvin, which uses this formula:\n\n$$\n\\text{K} = (\\text{F} - 32) \\times \\frac{5}{9} + 273.15\n$$\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(weather_atl, aes(x = time, y = temperatureHigh)) +\n  geom_line() +\n  scale_y_continuous(sec.axis = sec_axis(trans = ~ (. - 32) * 5/9 + 273.15,\n                                         name = \"Kelvin\")) +\n  labs(x = NULL, y = \"Fahrenheit\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](visualization_files/figure-html/atl-weather-dual-axes-kelvin-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\n\n\n## Interesting and excellent real world examples\n\n- [The Stories Behind a Line](http://www.storiesbehindaline.com/)\n- [Australia as 100 people](https://flowingdata.com/2017/06/28/australia-as-100-people/): You can make something like this with [d3](https://d3js.org/) and the [potato project](https://github.com/civisanalytics/potato).\n- [Marrying Later, Staying Single Longer](https://flowingdata.com/2017/07/17/marrying-age-over-the-past-century/)\n\n\n## How to select the appropriate chart type\n\nMany people have created many useful tools for selecting the correct chart type for a given dataset or question. Here are some of the best:\n\n- [**The Data Visualisation Catalogue**](http://www.datavizcatalogue.com/): Descriptions, explanations, examples, and tools for creating 60 different types of visualizations.\n- [**The Data Viz Project**](http://datavizproject.com/): Descriptions and examples for 150 different types of visualizations. Also allows you to search by data shape and chart function (comparison, correlation, distribution, geographical, part to whole, trend over time, etc.).\n- [**From Data to Viz**](https://www.data-to-viz.com/): A decision tree for dozens of chart types with links to R and Python code.\n- [**The Chartmaker Directory**](http://chartmaker.visualisingdata.com/): Examples of how to create 51 different types of visualizations in 31 different software packages, including Excel, Tableau, and R.\n- [**R Graph Catalog**](http://shinyapps.stat.ubc.ca/r-graph-catalog/): R code for 124 ggplot graphs.\n- [**Emery's Essentials**](http://annkemery.com/essentials/): Descriptions and examples of 26 different chart types.\n\n\n## General resources\n\n- [**Storytelling with Data**](http://www.storytellingwithdata.com/): Blog and site full of resources by Cole Nussbaumer Knaflic.\n- [**Ann K. Emery's blog**](http://annkemery.com/blog/): Blog and tutorials by [Ann Emery](https://twitter.com/AnnKEmery).\n- [**Evergreen Data**](http://stephanieevergreen.com/): Helful resources by [Stephanie Evergreen](https://twitter.com/evergreendata).\n- [**PolicyViz**](https://policyviz.com/): Regular podcast and site full of helpful resources by [Jon Schwabisch](https://twitter.com/jschwabish).\n- [**Visualising Data**](http://www.visualisingdata.com/): Fantastic collection of visualization resources, articles, and tutorials by [Andy Kirk](https://twitter.com/visualisingdata).\n- [**Info We Trust**](http://infowetrust.com/): Detailed explorations of visualizations by [RJ Andrews](https://twitter.com/infowetrust), including a [beautiful visual history of the field](http://infowetrust.com/history/).\n- [**FlowingData**](https://flowingdata.com/): Blog by [Nathan Yau](https://twitter.com/flowingdata).\n- [**Information is Beautiful**](http://www.informationisbeautiful.net/): Blog by [David McCandless](https://twitter.com/mccandelish).\n- [**Junk Charts**](http://junkcharts.typepad.com/): Blog by [Kaiser Fung](https://twitter.com/junkcharts).\n- [**WTF Visualizations**](http://viz.wtf/): Visualizations that make you ask \"wtf?\"\n- [**The Data Visualization Checklist**](http://annkemery.com/checklist/): A helpful set of criteria for grading the effectiveness of a graphic.\n- [**Data Literacy Starter Kit**](https://docs.google.com/document/d/1kKRadOiF0LruItsvGA40fSDZkAQfCqC_Ela0gBdo8A4/edit): Compilation of resources to become data literate by [Laura Calloway](http://lauracalloway.com/).\n- [**Seeing Data**](http://seeingdata.org/): A series of research projects about perceptions and visualizations.\n\n\n## Visualization in Excel\n\n- [**How to Build Data Visualizations in Excel**](http://stephanieevergreen.com/how-to/): Detailed tutorials for creating 14 different visualizations in Excel.\n- [**Ann Emery's tutorials**](http://annkemery.com/category/visualizing-data/tutorials/): Fantastic series of tutorials for creating charts in Excel.\n\n\n## Visualization in Tableau\n\nBecause it is focused entirely on visualization (and because it's a well-supported commercial product), Tableau has a [phenomenal library of tutorials and training videos](https://www.tableau.com/learn/training). There's [a helpful collections of videos here](https://www.quora.com/What-are-some-good-video-tutorials-for-learning-Tableau), as well.\n",
    "supporting": [
      "visualization_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}